{
  "version": 3,
  "sources": ["../../../../../apps/coatserve/coatserve/public/js/utils.js"],
  "sourcesContent": ["// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\n// License: GNU General Public License v3. See license.txt\nfrappe.provide(\"erpnext\");\nfrappe.provide(\"erpnext.utils\");\n\n$.extend(erpnext, {\n    get_currency: function (company) {\n        if (!company && cur_frm)\n            company = cur_frm.doc.company;\n        if (company)\n            return frappe.get_doc(\":Company\", company).default_currency || frappe.boot.sysdefaults.currency;\n        else\n            return frappe.boot.sysdefaults.currency;\n    },\n\n    get_presentation_currency_list: () => {\n        const docs = frappe.boot.docs;\n        let currency_list = docs.filter(d => d.doctype === \":Currency\").map(d => d.name);\n        currency_list.unshift(\"\");\n        return currency_list;\n    },\n\n    toggle_naming_series: function () {\n        if (cur_frm.fields_dict.naming_series) {\n            cur_frm.toggle_display(\"naming_series\", cur_frm.doc.__islocal ? true : false);\n        }\n    },\n\n    hide_company: function () {\n        if (cur_frm.fields_dict.company) {\n            var companies = Object.keys(locals[\":Company\"] || {});\n            if (companies.length === 1) {\n                if (!cur_frm.doc.company) cur_frm.set_value(\"company\", companies[0]);\n                cur_frm.toggle_display(\"company\", false);\n            } else if (erpnext.last_selected_company) {\n                if (!cur_frm.doc.company) cur_frm.set_value(\"company\", erpnext.last_selected_company);\n            }\n        }\n    },\n\n    is_perpetual_inventory_enabled: function (company) {\n        if (company) {\n            return frappe.get_doc(\":Company\", company).enable_perpetual_inventory\n        }\n    },\n\n    stale_rate_allowed: () => {\n        return cint(frappe.boot.sysdefaults.allow_stale);\n    },\n\n    setup_serial_or_batch_no: function () {\n        let grid_row = cur_frm.open_grid_row();\n        if (!grid_row || !grid_row.grid_form.fields_dict.serial_no ||\n            grid_row.grid_form.fields_dict.serial_no.get_status() !== \"Write\") return;\n\n        frappe.model.get_value('Item', { 'name': grid_row.doc.item_code },\n            ['has_serial_no', 'has_batch_no'], ({ has_serial_no, has_batch_no }) => {\n                Object.assign(grid_row.doc, { has_serial_no, has_batch_no });\n\n                if (has_serial_no) {\n                    attach_selector_button(__(\"Add Serial No\"),\n                        grid_row.grid_form.fields_dict.serial_no.$wrapper, this, grid_row);\n                } else if (has_batch_no) {\n                    attach_selector_button(__(\"Pick Batch No\"),\n                        grid_row.grid_form.fields_dict.batch_no.$wrapper, this, grid_row);\n                }\n            }\n        );\n    },\n\n    route_to_adjustment_jv: (args) => {\n        frappe.model.with_doctype('Journal Entry', () => {\n            // route to adjustment Journal Entry to handle Account Balance and Stock Value mismatch\n            let journal_entry = frappe.model.get_new_doc('Journal Entry');\n\n            args.accounts.forEach((je_account) => {\n                let child_row = frappe.model.add_child(journal_entry, \"accounts\");\n                child_row.account = je_account.account;\n                child_row.debit_in_account_currency = je_account.debit_in_account_currency;\n                child_row.credit_in_account_currency = je_account.credit_in_account_currency;\n                child_row.party_type = \"\";\n            });\n            frappe.set_route('Form', 'Journal Entry', journal_entry.name);\n        });\n    },\n\n    route_to_pending_reposts: (args) => {\n        frappe.set_route('List', 'Repost Item Valuation', args);\n    },\n});\n\n\n$.extend(erpnext.utils, {\n    set_party_dashboard_indicators: function (frm) {\n        if (frm.doc.__onload && frm.doc.__onload.dashboard_info) {\n            var company_wise_info = frm.doc.__onload.dashboard_info;\n            if (company_wise_info.length > 1) {\n                company_wise_info.forEach(function (info) {\n                    erpnext.utils.add_indicator_for_multicompany(frm, info);\n                });\n            } else if (company_wise_info.length === 1) {\n                frm.dashboard.add_indicator(__('Annual Billing: {0}',\n                    [format_currency(company_wise_info[0].billing_this_year, company_wise_info[0].currency)]), 'blue');\n                frm.dashboard.add_indicator(__('Total Unpaid: {0}',\n                    [format_currency(company_wise_info[0].total_unpaid, company_wise_info[0].currency)]),\n                    company_wise_info[0].total_unpaid ? 'orange' : 'green');\n\n                if (company_wise_info[0].loyalty_points) {\n                    frm.dashboard.add_indicator(__('Loyalty Points: {0}',\n                        [company_wise_info[0].loyalty_points]), 'blue');\n                }\n            }\n        }\n    },\n\n    add_indicator_for_multicompany: function (frm, info) {\n        frm.dashboard.stats_area.show();\n        frm.dashboard.stats_area_row.addClass('flex');\n        frm.dashboard.stats_area_row.css('flex-wrap', 'wrap');\n\n        var color = info.total_unpaid ? 'orange' : 'green';\n\n        var indicator = $('<div class=\"flex-column col-xs-6\">' +\n            '<div style=\"margin-top:10px\"><h6>' + info.company + '</h6></div>' +\n\n            '<div class=\"badge-link small\" style=\"margin-bottom:10px\"><span class=\"indicator blue\">' +\n            'Annual Billing: ' + format_currency(info.billing_this_year, info.currency) + '</span></div>' +\n\n            '<div class=\"badge-link small\" style=\"margin-bottom:10px\">' +\n            '<span class=\"indicator ' + color + '\">Total Unpaid: '\n            + format_currency(info.total_unpaid, info.currency) + '</span></div>' +\n\n\n            '</div>').appendTo(frm.dashboard.stats_area_row);\n\n        if (info.loyalty_points) {\n            $('<div class=\"badge-link small\" style=\"margin-bottom:10px\"><span class=\"indicator blue\">' +\n                'Loyalty Points: ' + info.loyalty_points + '</span></div>').appendTo(indicator);\n        }\n\n        return indicator;\n    },\n\n    get_party_name: function (party_type) {\n        var dict = {\n            'Customer': 'customer_name', 'Supplier': 'supplier_name', 'Employee': 'employee_name',\n            'Member': 'member_name'\n        };\n        return dict[party_type];\n    },\n\n    copy_value_in_all_rows: function (doc, dt, dn, table_fieldname, fieldname) {\n        var d = locals[dt][dn];\n        if (d[fieldname]) {\n            var cl = doc[table_fieldname] || [];\n            for (var i = 0; i < cl.length; i++) {\n                if (!cl[i][fieldname]) cl[i][fieldname] = d[fieldname];\n            }\n        }\n        refresh_field(table_fieldname);\n    },\n\n    get_terms: function (tc_name, doc, callback) {\n        if (tc_name) {\n            return frappe.call({\n                method: 'erpnext.setup.doctype.terms_and_conditions.terms_and_conditions.get_terms_and_conditions',\n                args: {\n                    template_name: tc_name,\n                    doc: doc\n                },\n                callback: function (r) {\n                    callback(r)\n                }\n            });\n        }\n    },\n\n    make_bank_account: function (doctype, docname) {\n        frappe.call({\n            method: \"erpnext.accounts.doctype.bank_account.bank_account.make_bank_account\",\n            args: {\n                doctype: doctype,\n                docname: docname\n            },\n            freeze: true,\n            callback: function (r) {\n                var doclist = frappe.model.sync(r.message);\n                frappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\n            }\n        })\n    },\n\n    add_dimensions: function (report_name, index) {\n        let filters = frappe.query_reports[report_name].filters;\n\n        frappe.call({\n            method: \"erpnext.accounts.doctype.accounting_dimension.accounting_dimension.get_dimensions\",\n            callback: function (r) {\n                let accounting_dimensions = r.message[0];\n                accounting_dimensions.forEach((dimension) => {\n                    let found = filters.some(el => el.fieldname === dimension['fieldname']);\n\n                    if (!found) {\n                        filters.splice(index, 0, {\n                            \"fieldname\": dimension[\"fieldname\"],\n                            \"label\": __(dimension[\"label\"]),\n                            \"fieldtype\": \"MultiSelectList\",\n                            get_data: function (txt) {\n                                return frappe.db.get_link_options(dimension[\"document_type\"], txt);\n                            },\n                        });\n                    }\n                });\n            }\n        });\n    },\n\n    add_inventory_dimensions: function (report_name, index) {\n        let filters = frappe.query_reports[report_name].filters;\n\n        frappe.call({\n            method: \"erpnext.stock.doctype.inventory_dimension.inventory_dimension.get_inventory_dimensions\",\n            callback: function (r) {\n                if (r.message && r.message.length) {\n                    r.message.forEach((dimension) => {\n                        let existing_filter = filters.filter(el => el.fieldname === dimension['fieldname']);\n\n                        if (!existing_filter.length) {\n                            filters.splice(index, 0, {\n                                \"fieldname\": dimension[\"fieldname\"],\n                                \"label\": __(dimension[\"doctype\"]),\n                                \"fieldtype\": \"MultiSelectList\",\n                                get_data: function (txt) {\n                                    return frappe.db.get_link_options(dimension[\"doctype\"], txt);\n                                },\n                            });\n                        } else {\n                            existing_filter[0]['fieldtype'] = \"MultiSelectList\";\n                            existing_filter[0]['get_data'] = function (txt) {\n                                return frappe.db.get_link_options(dimension[\"doctype\"], txt);\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    make_subscription: function (doctype, docname) {\n        frappe.call({\n            method: \"frappe.automation.doctype.auto_repeat.auto_repeat.make_auto_repeat\",\n            args: {\n                doctype: doctype,\n                docname: docname\n            },\n            callback: function (r) {\n                var doclist = frappe.model.sync(r.message);\n                frappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\n            }\n        })\n    },\n\n    make_pricing_rule: function (doctype, docname) {\n        frappe.call({\n            method: \"erpnext.accounts.doctype.pricing_rule.pricing_rule.make_pricing_rule\",\n            args: {\n                doctype: doctype,\n                docname: docname\n            },\n            callback: function (r) {\n                var doclist = frappe.model.sync(r.message);\n                frappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\n            }\n        })\n    },\n\n    /**\n    * Checks if the first row of a given child table is empty\n    * @param child_table - Child table Doctype\n    * @return {Boolean}\n    **/\n    first_row_is_empty: function (child_table) {\n        if ($.isArray(child_table) && child_table.length > 0) {\n            return !child_table[0].item_code;\n        }\n        return false;\n    },\n\n    /**\n    * Removes the first row of a child table if it is empty\n    * @param {_Frm} frm - The current form\n    * @param {String} child_table_name - The child table field name\n    * @return {Boolean}\n    **/\n    remove_empty_first_row: function (frm, child_table_name) {\n        const rows = frm['doc'][child_table_name];\n        if (this.first_row_is_empty(rows)) {\n            frm['doc'][child_table_name] = rows.splice(1);\n        }\n        return rows;\n    },\n    get_tree_options: function (option) {\n        // get valid options for tree based on user permission & locals dict\n        let unscrub_option = frappe.model.unscrub(option);\n        let user_permission = frappe.defaults.get_user_permissions();\n        let options;\n\n        if (user_permission && user_permission[unscrub_option]) {\n            options = user_permission[unscrub_option].map(perm => perm.doc);\n        } else {\n            options = $.map(locals[`:${unscrub_option}`], function (c) { return c.name; }).sort();\n        }\n\n        // filter unique values, as there may be multiple user permissions for any value\n        return options.filter((value, index, self) => self.indexOf(value) === index);\n    },\n    get_tree_default: function (option) {\n        // set default for a field based on user permission\n        let options = this.get_tree_options(option);\n        if (options.includes(frappe.defaults.get_default(option))) {\n            return frappe.defaults.get_default(option);\n        } else {\n            return options[0];\n        }\n    },\n    overrides_parent_value_in_all_rows: function (doc, dt, dn, table_fieldname, fieldname, parent_fieldname) {\n        if (doc[parent_fieldname]) {\n            let cl = doc[table_fieldname] || [];\n            for (let i = 0; i < cl.length; i++) {\n                cl[i][fieldname] = doc[parent_fieldname];\n            }\n            frappe.refresh_field(table_fieldname);\n        }\n    },\n    create_new_doc: function (doctype, update_fields) {\n        frappe.model.with_doctype(doctype, function () {\n            var new_doc = frappe.model.get_new_doc(doctype);\n            for (let [key, value] of Object.entries(update_fields)) {\n                new_doc[key] = value;\n            }\n            frappe.ui.form.make_quick_entry(doctype, null, null, new_doc);\n        });\n    },\n\n    // check if payments app is installed on site, if not warn user.\n    check_payments_app: () => {\n        if (frappe.boot.versions && !frappe.boot.versions.payments) {\n            const marketplace_link = '<a href=\"https://frappecloud.com/marketplace/apps/payments\">Marketplace</a>'\n            const github_link = '<a href=\"https://github.com/frappe/payments/\">GitHub</a>'\n            const msg = __(\"payments app is not installed. Please install it from {0} or {1}\", [marketplace_link, github_link])\n            frappe.msgprint(msg);\n        }\n\n    },\n});\n\nerpnext.utils.select_alternate_items = function (opts) {\n    const frm = opts.frm;\n    const warehouse_field = opts.warehouse_field || 'warehouse';\n    const item_field = opts.item_field || 'item_code';\n\n    this.data = [];\n    const dialog = new frappe.ui.Dialog({\n        title: __(\"Select Alternate Item\"),\n        fields: [\n            { fieldtype: 'Section Break', label: __('Items') },\n            {\n                fieldname: \"alternative_items\", fieldtype: \"Table\", cannot_add_rows: true,\n                in_place_edit: true, data: this.data,\n                get_data: () => {\n                    return this.data;\n                },\n                fields: [{\n                    fieldtype: 'Data',\n                    fieldname: \"docname\",\n                    hidden: 1\n                }, {\n                    fieldtype: 'Link',\n                    fieldname: \"item_code\",\n                    options: 'Item',\n                    in_list_view: 1,\n                    read_only: 1,\n                    label: __('Item Code')\n                }, {\n                    fieldtype: 'Link',\n                    fieldname: \"alternate_item\",\n                    options: 'Item',\n                    default: \"\",\n                    in_list_view: 1,\n                    label: __('Alternate Item'),\n                    onchange: function () {\n                        const item_code = this.get_value();\n                        const warehouse = this.grid_row.on_grid_fields_dict.warehouse.get_value();\n                        if (item_code && warehouse) {\n                            frappe.call({\n                                method: \"erpnext.stock.utils.get_latest_stock_qty\",\n                                args: {\n                                    item_code: item_code,\n                                    warehouse: warehouse\n                                },\n                                callback: (r) => {\n                                    this.grid_row.on_grid_fields_dict\n                                        .actual_qty.set_value(r.message || 0);\n                                }\n                            })\n                        }\n                    },\n                    get_query: (e) => {\n                        return {\n                            query: \"erpnext.stock.doctype.item_alternative.item_alternative.get_alternative_items\",\n                            filters: {\n                                item_code: e.item_code\n                            }\n                        };\n                    }\n                }, {\n                    fieldtype: 'Link',\n                    fieldname: \"warehouse\",\n                    options: 'Warehouse',\n                    default: \"\",\n                    in_list_view: 1,\n                    label: __('Warehouse'),\n                    onchange: function () {\n                        const warehouse = this.get_value();\n                        const item_code = this.grid_row.on_grid_fields_dict.item_code.get_value();\n                        if (item_code && warehouse) {\n                            frappe.call({\n                                method: \"erpnext.stock.utils.get_latest_stock_qty\",\n                                args: {\n                                    item_code: item_code,\n                                    warehouse: warehouse\n                                },\n                                callback: (r) => {\n                                    this.grid_row.on_grid_fields_dict\n                                        .actual_qty.set_value(r.message || 0);\n                                }\n                            })\n                        }\n                    },\n                }, {\n                    fieldtype: 'Float',\n                    fieldname: \"actual_qty\",\n                    default: 0,\n                    read_only: 1,\n                    in_list_view: 1,\n                    label: __('Available Qty')\n                }]\n            },\n        ],\n        primary_action: function () {\n            const args = this.get_values()[\"alternative_items\"];\n            const alternative_items = args.filter(d => {\n                if (d.alternate_item && d.item_code != d.alternate_item) {\n                    return true;\n                }\n            });\n\n            alternative_items.forEach(d => {\n                let row = frappe.get_doc(opts.child_doctype, d.docname);\n                let qty = null;\n                if (row.doctype === 'Work Order Item') {\n                    qty = row.required_qty;\n                } else {\n                    qty = row.qty;\n                }\n                row[item_field] = d.alternate_item;\n                frappe.model.set_value(row.doctype, row.name, 'qty', qty);\n                frappe.model.set_value(row.doctype, row.name, opts.original_item_field, d.item_code);\n                frm.trigger(item_field, row.doctype, row.name);\n            });\n\n            refresh_field(opts.child_docname);\n            this.hide();\n        },\n        primary_action_label: __('Update')\n    });\n\n    frm.doc[opts.child_docname].forEach(d => {\n        if (!opts.condition || opts.condition(d)) {\n            dialog.fields_dict.alternative_items.df.data.push({\n                \"docname\": d.name,\n                \"item_code\": d[item_field],\n                \"warehouse\": d[warehouse_field],\n                \"actual_qty\": d.actual_qty\n            });\n        }\n    })\n\n    this.data = dialog.fields_dict.alternative_items.df.data;\n    dialog.fields_dict.alternative_items.grid.refresh();\n    dialog.show();\n}\n\nerpnext.utils.update_child_items = function (opts) {\n    const frm = opts.frm;\n    const cannot_add_row = (typeof opts.cannot_add_row === 'undefined') ? true : opts.cannot_add_row;\n    const child_docname = (typeof opts.cannot_add_row === 'undefined') ? \"items\" : opts.child_docname;\n    const child_meta = frappe.get_meta(`${frm.doc.doctype} Item`);\n    const get_precision = (fieldname) => child_meta.fields.find(f => f.fieldname == fieldname).precision;\n\n    this.data = frm.doc[opts.child_docname].map((d) => {\n        return {\n            \"docname\": d.name,\n            \"name\": d.name,\n            \"item_code\": d.item_code,\n            \"delivery_date\": d.delivery_date,\n            \"schedule_date\": d.schedule_date,\n            \"conversion_factor\": d.conversion_factor,\n            \"qty\": d.qty,\n            \"rate\": d.rate,\n            \"uom\": d.uom,\n            \"pack_size\": d.pack_size,\n            \"quantity_ltr_kg\": d.quantity_ltr_kg,\n            \"price_per_lt_or_kg\": d.price_per_lt_or_kg\n        }\n    });\n\n    const fields = [{\n        fieldtype: 'Data',\n        fieldname: \"docname\",\n        read_only: 1,\n        hidden: 1,\n    }, {\n        fieldtype: 'Link',\n        fieldname: \"item_code\",\n        options: 'Item',\n        in_list_view: 1,\n        read_only: 0,\n        disabled: 0,\n        label: __('Item Code'),\n        get_query: function () {\n            let filters;\n            if (frm.doc.doctype == 'Sales Order') {\n                filters = { \"is_sales_item\": 1 };\n            } else if (frm.doc.doctype == 'Purchase Order') {\n                if (frm.doc.is_subcontracted) {\n                    if (frm.doc.is_old_subcontracting_flow) {\n                        filters = { \"is_sub_contracted_item\": 1 };\n                    } else {\n                        filters = { \"is_stock_item\": 0 };\n                    }\n                } else {\n                    filters = { \"is_purchase_item\": 1 };\n                }\n            }\n            return {\n                query: \"erpnext.controllers.queries.item_query\",\n                filters: filters\n            };\n        }\n    }, {\n        fieldtype: 'Link',\n        fieldname: 'uom',\n        options: 'UOM',\n        read_only: 0,\n        label: __('UOM'),\n        reqd: 1,\n        onchange: function () {\n            frappe.call({\n                method: \"erpnext.stock.get_item_details.get_conversion_factor\",\n                args: { item_code: this.doc.item_code, uom: this.value },\n                callback: r => {\n                    if (!r.exc) {\n                        if (this.doc.conversion_factor == r.message.conversion_factor) return;\n\n                        const docname = this.doc.docname;\n                        dialog.fields_dict.trans_items.df.data.some(doc => {\n                            if (doc.docname == docname) {\n                                doc.conversion_factor = r.message.conversion_factor;\n                                dialog.fields_dict.trans_items.grid.refresh();\n                                return true;\n                            }\n                        })\n                    }\n                }\n            });\n        }\n    }, {\n        fieldtype: 'Float',\n        fieldname: \"qty\",\n        default: 0,\n        read_only: 0,\n        in_list_view: 1,\n        label: __('Qty'),\n        precision: get_precision(\"qty\")\n    }, {\n        fieldtype: 'Currency',\n        fieldname: \"rate\",\n        options: \"currency\",\n        default: 0,\n        read_only: 0,\n        in_list_view: 1,\n        label: __('Rate'),\n        precision: get_precision(\"rate\")\n    },\n    {\n        fieldtype: 'Data',\n        fieldname: \"pack_size\",\n        default: 0,\n        read_only: 1,\n        in_list_view: 1,\n        label: __('Pack Size'),\n    }\n    ,{\n            fieldtype: 'Currency',\n            fieldname: \"price_per_lt_or_kg\",\n            default: 0,\n            read_only: 1,\n            in_list_view: 1,\n            label: __('Price Per Lt or Kg'),\n    },\n    {\n            fieldtype: 'Float',\n            fieldname: \"quantity_ltr_kg\",\n            default: 0,\n            read_only: 1,\n            in_list_view: 1,\n            label: __('Quantity Ltr Kg'),\n    }];\n\n    if (frm.doc.doctype == 'Sales Order' || frm.doc.doctype == 'Purchase Order') {\n        fields.splice(2, 0, {\n            fieldtype: 'Date',\n            fieldname: frm.doc.doctype == 'Sales Order' ? \"delivery_date\" : \"schedule_date\",\n            in_list_view: 1,\n            label: frm.doc.doctype == 'Sales Order' ? __(\"Delivery Date\") : __(\"Reqd by date\"),\n            reqd: 1\n        })\n        fields.splice(3, 0, {\n            fieldtype: 'Float',\n            fieldname: \"conversion_factor\",\n            in_list_view: 1,\n            label: __(\"Conversion Factor\"),\n            precision: get_precision('conversion_factor')\n        })\n    }\n\n    new frappe.ui.Dialog({\n        title: __(\"Update Items\"),\n        fields: [\n            {\n                fieldname: \"trans_items\",\n                fieldtype: \"Table\",\n                label: \"Items\",\n                cannot_add_rows: cannot_add_row,\n                in_place_edit: false,\n                reqd: 1,\n                data: this.data,\n                get_data: () => {\n                    return this.data;\n                },\n                fields: fields\n            },\n        ],\n        primary_action: function () {\n            const trans_items = this.get_values()[\"trans_items\"].filter((item) => !!item.item_code);\n            frappe.call({\n                method: 'coatserve.coatserve.update_child_qty_rate',\n                freeze: true,\n                args: {\n                    'parent_doctype': frm.doc.doctype,\n                    'trans_items': trans_items,\n                    'parent_doctype_name': frm.doc.name,\n                    'child_docname': child_docname\n                },\n                callback: function () {\n                    frm.reload_doc();\n                }\n            });\n            this.hide();\n            refresh_field(\"items\");\n        },\n        primary_action_label: __('Update')\n    }).show();\n}\n\nerpnext.utils.map_current_doc = function (opts) {\n    function _map() {\n        if ($.isArray(cur_frm.doc.items) && cur_frm.doc.items.length > 0) {\n            // remove first item row if empty\n            if (!cur_frm.doc.items[0].item_code) {\n                cur_frm.doc.items = cur_frm.doc.items.splice(1);\n            }\n\n            // find the doctype of the items table\n            var items_doctype = frappe.meta.get_docfield(cur_frm.doctype, 'items').options;\n\n            // find the link fieldname from items table for the given\n            // source_doctype\n            var link_fieldname = null;\n            frappe.get_meta(items_doctype).fields.forEach(function (d) {\n                if (d.options === opts.source_doctype) link_fieldname = d.fieldname;\n            });\n\n            // search in existing items if the source_name is already set and full qty fetched\n            var already_set = false;\n            var item_qty_map = {};\n\n            $.each(cur_frm.doc.items, function (i, d) {\n                opts.source_name.forEach(function (src) {\n                    if (d[link_fieldname] == src) {\n                        already_set = true;\n                        if (item_qty_map[d.item_code])\n                            item_qty_map[d.item_code] += flt(d.qty);\n                        else\n                            item_qty_map[d.item_code] = flt(d.qty);\n                    }\n                });\n            });\n\n            if (already_set) {\n                opts.source_name.forEach(function (src) {\n                    frappe.model.with_doc(opts.source_doctype, src, function (r) {\n                        var source_doc = frappe.model.get_doc(opts.source_doctype, src);\n                        $.each(source_doc.items || [], function (i, row) {\n                            if (row.qty > flt(item_qty_map[row.item_code])) {\n                                already_set = false;\n                                return false;\n                            }\n                        })\n                    })\n\n                    if (already_set) {\n                        frappe.msgprint(__(\"You have already selected items from {0} {1}\",\n                            [opts.source_doctype, src]));\n                        return;\n                    }\n\n                })\n            }\n        }\n\n        return frappe.call({\n            // Sometimes we hit the limit for URL length of a GET request\n            // as we send the full target_doc. Hence this is a POST request.\n            type: \"POST\",\n            method: 'frappe.model.mapper.map_docs',\n            args: {\n                \"method\": opts.method,\n                \"source_names\": opts.source_name,\n                \"target_doc\": cur_frm.doc,\n                \"args\": opts.args\n            },\n            callback: function (r) {\n                if (!r.exc) {\n                    var doc = frappe.model.sync(r.message);\n                    cur_frm.dirty();\n                    cur_frm.refresh();\n                }\n            }\n        });\n    }\n\n    let query_args = {};\n    if (opts.get_query_filters) {\n        query_args.filters = opts.get_query_filters;\n    }\n\n    if (opts.get_query_method) {\n        query_args.query = opts.get_query_method;\n    }\n\n    if (query_args.filters || query_args.query) {\n        opts.get_query = () => query_args;\n    }\n\n    if (opts.source_doctype) {\n        const d = new frappe.ui.form.MultiSelectDialog({\n            doctype: opts.source_doctype,\n            target: opts.target,\n            date_field: opts.date_field || undefined,\n            setters: opts.setters,\n            get_query: opts.get_query,\n            add_filters_group: 1,\n            allow_child_item_selection: opts.allow_child_item_selection,\n            child_fieldname: opts.child_fieldname,\n            child_columns: opts.child_columns,\n            size: opts.size,\n            action: function (selections, args) {\n                let values = selections;\n                if (values.length === 0) {\n                    frappe.msgprint(__(\"Please select {0}\", [opts.source_doctype]))\n                    return;\n                }\n                opts.source_name = values;\n                if (opts.allow_child_item_selection) {\n                    // args contains filtered child docnames\n                    opts.args = args;\n                }\n                d.dialog.hide();\n                _map();\n            },\n        });\n\n        return d;\n    }\n\n    if (opts.source_name) {\n        opts.source_name = [opts.source_name];\n        _map();\n    }\n}\n\nfrappe.form.link_formatters['Item'] = function (value, doc) {\n    if (doc && value && doc.item_name && doc.item_name !== value && doc.item_code === value) {\n        return value + ': ' + doc.item_name;\n    } else if (!value && doc.doctype && doc.item_name) {\n        // format blank value in child table\n        return doc.item_name;\n    } else {\n        // if value is blank in report view or item code and name are the same, return as is\n        return value;\n    }\n}\n\nfrappe.form.link_formatters['Employee'] = function (value, doc) {\n    if (doc && value && doc.employee_name && doc.employee_name !== value && doc.employee === value) {\n        return value + ': ' + doc.employee_name;\n    } else if (!value && doc.doctype && doc.employee_name) {\n        // format blank value in child table\n        return doc.employee;\n    } else {\n        // if value is blank in report view or project name and name are the same, return as is\n        return value;\n    }\n}\n\nfrappe.form.link_formatters['Project'] = function (value, doc) {\n    if (doc && value && doc.project_name && doc.project_name !== value && doc.project === value) {\n        return value + ': ' + doc.project_name;\n    } else if (!value && doc.doctype && doc.project_name) {\n        // format blank value in child table\n        return doc.project;\n    } else {\n        // if value is blank in report view or project name and name are the same, return as is\n        return value;\n    }\n};\n\n// add description on posting time\n$(document).on('app_ready', function () {\n    if (!frappe.datetime.is_timezone_same()) {\n        $.each([\"Stock Reconciliation\", \"Stock Entry\", \"Stock Ledger Entry\",\n            \"Delivery Note\", \"Purchase Receipt\", \"Sales Invoice\"], function (i, d) {\n                frappe.ui.form.on(d, \"onload\", function (frm) {\n                    cur_frm.set_df_property(\"posting_time\", \"description\",\n                        frappe.sys_defaults.time_zone);\n                });\n            });\n    }\n});\n\n// Show SLA dashboard\n$(document).on('app_ready', function () {\n    frappe.call({\n        method: 'erpnext.support.doctype.service_level_agreement.service_level_agreement.get_sla_doctypes',\n        callback: function (r) {\n            if (!r.message)\n                return;\n\n            $.each(r.message, function (_i, d) {\n                frappe.ui.form.on(d, {\n                    onload: function (frm) {\n                        if (!frm.doc.service_level_agreement)\n                            return;\n\n                        frappe.call({\n                            method: 'erpnext.support.doctype.service_level_agreement.service_level_agreement.get_service_level_agreement_filters',\n                            args: {\n                                doctype: frm.doc.doctype,\n                                name: frm.doc.service_level_agreement,\n                                customer: frm.doc.customer\n                            },\n                            callback: function (r) {\n                                if (r && r.message) {\n                                    frm.set_query('priority', function () {\n                                        return {\n                                            filters: {\n                                                'name': ['in', r.message.priority],\n                                            }\n                                        };\n                                    });\n                                    frm.set_query('service_level_agreement', function () {\n                                        return {\n                                            filters: {\n                                                'name': ['in', r.message.service_level_agreements],\n                                            }\n                                        };\n                                    });\n                                }\n                            }\n                        });\n                    },\n\n                    refresh: function (frm) {\n                        if (frm.doc.status !== 'Closed' && frm.doc.service_level_agreement\n                            && ['First Response Due', 'Resolution Due'].includes(frm.doc.agreement_status)) {\n                            frappe.call({\n                                'method': 'frappe.client.get',\n                                args: {\n                                    doctype: 'Service Level Agreement',\n                                    name: frm.doc.service_level_agreement\n                                },\n                                callback: function (data) {\n                                    let statuses = data.message.pause_sla_on;\n                                    const hold_statuses = [];\n                                    $.each(statuses, (_i, entry) => {\n                                        hold_statuses.push(entry.status);\n                                    });\n                                    if (hold_statuses.includes(frm.doc.status)) {\n                                        frm.dashboard.clear_headline();\n                                        let message = { 'indicator': 'orange', 'msg': __('SLA is on hold since {0}', [moment(frm.doc.on_hold_since).fromNow(true)]) };\n                                        frm.dashboard.set_headline_alert(\n                                            '<div class=\"row\">' +\n                                            '<div class=\"col-xs-12\">' +\n                                            '<span class=\"indicator whitespace-nowrap ' + message.indicator + '\"><span>' + message.msg + '</span></span> ' +\n                                            '</div>' +\n                                            '</div>'\n                                        );\n                                    } else {\n                                        set_time_to_resolve_and_response(frm, data.message.apply_sla_for_resolution);\n                                    }\n                                }\n                            });\n                        } else if (frm.doc.service_level_agreement) {\n                            frm.dashboard.clear_headline();\n\n                            let agreement_status = (frm.doc.agreement_status == 'Fulfilled') ?\n                                { 'indicator': 'green', 'msg': 'Service Level Agreement has been fulfilled' } :\n                                { 'indicator': 'red', 'msg': 'Service Level Agreement Failed' };\n\n                            frm.dashboard.set_headline_alert(\n                                '<div class=\"row\">' +\n                                '<div class=\"col-xs-12\">' +\n                                '<span class=\"indicator whitespace-nowrap ' + agreement_status.indicator + '\"><span class=\"hidden-xs\">' + agreement_status.msg + '</span></span> ' +\n                                '</div>' +\n                                '</div>'\n                            );\n                        }\n                    },\n                });\n            });\n        }\n    });\n});\n\nfunction set_time_to_resolve_and_response(frm, apply_sla_for_resolution) {\n    frm.dashboard.clear_headline();\n\n    let time_to_respond;\n    if (!frm.doc.first_responded_on) {\n        time_to_respond = get_time_left(frm.doc.response_by, frm.doc.agreement_status);\n    } else {\n        time_to_respond = get_status(frm.doc.response_by, frm.doc.first_responded_on);\n    }\n\n    let alert = `\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-xs-12 col-sm-6\">\n\t\t\t\t<span class=\"indicator whitespace-nowrap ${time_to_respond.indicator}\">\n\t\t\t\t\t<span>Time to Respond: ${time_to_respond.diff_display}</span>\n\t\t\t\t</span>\n\t\t\t</div>`;\n\n\n    if (apply_sla_for_resolution) {\n        let time_to_resolve;\n        if (!frm.doc.resolution_date) {\n            time_to_resolve = get_time_left(frm.doc.resolution_by, frm.doc.agreement_status);\n        } else {\n            time_to_resolve = get_status(frm.doc.resolution_by, frm.doc.resolution_date);\n        }\n\n        alert += `\n\t\t\t<div class=\"col-xs-12 col-sm-6\">\n\t\t\t\t<span class=\"indicator whitespace-nowrap ${time_to_resolve.indicator}\">\n\t\t\t\t\t<span>Time to Resolve: ${time_to_resolve.diff_display}</span>\n\t\t\t\t</span>\n\t\t\t</div>`;\n    }\n\n    alert += '</div>';\n\n    frm.dashboard.set_headline_alert(alert);\n}\n\nfunction get_time_left(timestamp, agreement_status) {\n    const diff = moment(timestamp).diff(moment());\n    const diff_display = diff >= 44500 ? moment.duration(diff).humanize() : 'Failed';\n    let indicator = (diff_display == 'Failed' && agreement_status != 'Fulfilled') ? 'red' : 'green';\n    return { 'diff_display': diff_display, 'indicator': indicator };\n}\n\nfunction get_status(expected, actual) {\n    const time_left = moment(expected).diff(moment(actual));\n    if (time_left >= 0) {\n        return { 'diff_display': 'Fulfilled', 'indicator': 'green' };\n    } else {\n        return { 'diff_display': 'Failed', 'indicator': 'red' };\n    }\n}\n\nfunction attach_selector_button(inner_text, append_loction, context, grid_row) {\n    let $btn_div = $(\"<div>\").css({ \"margin-bottom\": \"10px\", \"margin-top\": \"10px\" })\n        .appendTo(append_loction);\n    let $btn = $(`<button class=\"btn btn-sm btn-default\">${inner_text}</button>`)\n        .appendTo($btn_div);\n\n    $btn.on(\"click\", function () {\n        context.show_serial_batch_selector(grid_row.frm, grid_row.doc, \"\", \"\", true);\n    });\n}\n"],
  "mappings": "MAEA,OAAO,QAAQ,SAAS,EACxB,OAAO,QAAQ,eAAe,EAE9B,EAAE,OAAO,QAAS,CACd,aAAc,SAAU,EAAS,CAG7B,MAFI,CAAC,GAAW,SACZ,GAAU,QAAQ,IAAI,SACtB,GACO,OAAO,QAAQ,WAAY,CAAO,EAAE,kBAAoB,OAAO,KAAK,YAAY,QAG/F,EAEA,+BAAgC,IAAM,CAElC,GAAI,GAAgB,AADP,OAAO,KAAK,KACA,OAAO,GAAK,EAAE,UAAY,WAAW,EAAE,IAAI,GAAK,EAAE,IAAI,EAC/E,SAAc,QAAQ,EAAE,EACjB,CACX,EAEA,qBAAsB,UAAY,CAC9B,AAAI,QAAQ,YAAY,eACpB,QAAQ,eAAe,gBAAiB,UAAQ,IAAI,SAAwB,CAEpF,EAEA,aAAc,UAAY,CACtB,GAAI,QAAQ,YAAY,QAAS,CAC7B,GAAI,GAAY,OAAO,KAAK,OAAO,aAAe,CAAC,CAAC,EACpD,AAAI,EAAU,SAAW,EAChB,SAAQ,IAAI,SAAS,QAAQ,UAAU,UAAW,EAAU,EAAE,EACnE,QAAQ,eAAe,UAAW,EAAK,GAChC,QAAQ,uBACV,SAAQ,IAAI,SAAS,QAAQ,UAAU,UAAW,QAAQ,qBAAqB,EAE5F,CACJ,EAEA,+BAAgC,SAAU,EAAS,CAC/C,GAAI,EACA,MAAO,QAAO,QAAQ,WAAY,CAAO,EAAE,0BAEnD,EAEA,mBAAoB,IACT,KAAK,OAAO,KAAK,YAAY,WAAW,EAGnD,yBAA0B,UAAY,CAClC,GAAI,GAAW,QAAQ,cAAc,EACrC,AAAI,CAAC,GAAY,CAAC,EAAS,UAAU,YAAY,WAC7C,EAAS,UAAU,YAAY,UAAU,WAAW,IAAM,SAE9D,OAAO,MAAM,UAAU,OAAQ,CAAE,KAAQ,EAAS,IAAI,SAAU,EAC5D,CAAC,gBAAiB,cAAc,EAAG,CAAC,CAAE,gBAAe,kBAAmB,CACpE,OAAO,OAAO,EAAS,IAAK,CAAE,gBAAe,cAAa,CAAC,EAE3D,AAAI,EACA,EAAuB,GAAG,eAAe,EACrC,EAAS,UAAU,YAAY,UAAU,SAAU,KAAM,CAAQ,EAC9D,GACP,EAAuB,GAAG,eAAe,EACrC,EAAS,UAAU,YAAY,SAAS,SAAU,KAAM,CAAQ,CAE5E,CACJ,CACJ,EAEA,uBAAwB,AAAC,GAAS,CAC9B,OAAO,MAAM,aAAa,gBAAiB,IAAM,CAE7C,GAAI,GAAgB,OAAO,MAAM,YAAY,eAAe,EAE5D,EAAK,SAAS,QAAQ,AAAC,GAAe,CAClC,GAAI,GAAY,OAAO,MAAM,UAAU,EAAe,UAAU,EAChE,EAAU,QAAU,EAAW,QAC/B,EAAU,0BAA4B,EAAW,0BACjD,EAAU,2BAA6B,EAAW,2BAClD,EAAU,WAAa,EAC3B,CAAC,EACD,OAAO,UAAU,OAAQ,gBAAiB,EAAc,IAAI,CAChE,CAAC,CACL,EAEA,yBAA0B,AAAC,GAAS,CAChC,OAAO,UAAU,OAAQ,wBAAyB,CAAI,CAC1D,CACJ,CAAC,EAGD,EAAE,OAAO,QAAQ,MAAO,CACpB,+BAAgC,SAAU,EAAK,CAC3C,GAAI,EAAI,IAAI,UAAY,EAAI,IAAI,SAAS,eAAgB,CACrD,GAAI,GAAoB,EAAI,IAAI,SAAS,eACzC,AAAI,EAAkB,OAAS,EAC3B,EAAkB,QAAQ,SAAU,EAAM,CACtC,QAAQ,MAAM,+BAA+B,EAAK,CAAI,CAC1D,CAAC,EACM,EAAkB,SAAW,GACpC,GAAI,UAAU,cAAc,GAAG,sBAC3B,CAAC,gBAAgB,EAAkB,GAAG,kBAAmB,EAAkB,GAAG,QAAQ,CAAC,CAAC,EAAG,MAAM,EACrG,EAAI,UAAU,cAAc,GAAG,oBAC3B,CAAC,gBAAgB,EAAkB,GAAG,aAAc,EAAkB,GAAG,QAAQ,CAAC,CAAC,EACnF,EAAkB,GAAG,aAAe,SAAW,OAAO,EAEtD,EAAkB,GAAG,gBACrB,EAAI,UAAU,cAAc,GAAG,sBAC3B,CAAC,EAAkB,GAAG,cAAc,CAAC,EAAG,MAAM,EAG9D,CACJ,EAEA,+BAAgC,SAAU,EAAK,EAAM,CACjD,EAAI,UAAU,WAAW,KAAK,EAC9B,EAAI,UAAU,eAAe,SAAS,MAAM,EAC5C,EAAI,UAAU,eAAe,IAAI,YAAa,MAAM,EAEpD,GAAI,GAAQ,EAAK,aAAe,SAAW,QAEvC,EAAY,EAAE,sEACwB,EAAK,QAAU,oHAGhC,gBAAgB,EAAK,kBAAmB,EAAK,QAAQ,EAAI,gGAGlD,EAAQ,mBAClC,gBAAgB,EAAK,aAAc,EAAK,QAAQ,EAAI,qBAG9C,EAAE,SAAS,EAAI,UAAU,cAAc,EAEnD,MAAI,GAAK,gBACL,EAAE,yGACuB,EAAK,eAAiB,eAAe,EAAE,SAAS,CAAS,EAG/E,CACX,EAEA,eAAgB,SAAU,EAAY,CAClC,GAAI,GAAO,CACP,SAAY,gBAAiB,SAAY,gBAAiB,SAAY,gBACtE,OAAU,aACd,EACA,MAAO,GAAK,EAChB,EAEA,uBAAwB,SAAU,EAAK,EAAI,EAAI,EAAiB,EAAW,CACvE,GAAI,GAAI,OAAO,GAAI,GACnB,GAAI,EAAE,GAEF,OADI,GAAK,EAAI,IAAoB,CAAC,EACzB,EAAI,EAAG,EAAI,EAAG,OAAQ,IAC3B,AAAK,EAAG,GAAG,IAAY,GAAG,GAAG,GAAa,EAAE,IAGpD,cAAc,CAAe,CACjC,EAEA,UAAW,SAAU,EAAS,EAAK,EAAU,CACzC,GAAI,EACA,MAAO,QAAO,KAAK,CACf,OAAQ,2FACR,KAAM,CACF,cAAe,EACf,IAAK,CACT,EACA,SAAU,SAAU,EAAG,CACnB,EAAS,CAAC,CACd,CACJ,CAAC,CAET,EAEA,kBAAmB,SAAU,EAAS,EAAS,CAC3C,OAAO,KAAK,CACR,OAAQ,uEACR,KAAM,CACF,QAAS,EACT,QAAS,CACb,EACA,OAAQ,GACR,SAAU,SAAU,EAAG,CACnB,GAAI,GAAU,OAAO,MAAM,KAAK,EAAE,OAAO,EACzC,OAAO,UAAU,OAAQ,EAAQ,GAAG,QAAS,EAAQ,GAAG,IAAI,CAChE,CACJ,CAAC,CACL,EAEA,eAAgB,SAAU,EAAa,EAAO,CAC1C,GAAI,GAAU,OAAO,cAAc,GAAa,QAEhD,OAAO,KAAK,CACR,OAAQ,oFACR,SAAU,SAAU,EAAG,CAEnB,AAD4B,EAAE,QAAQ,GAChB,QAAQ,AAAC,GAAc,CAGzC,AAAK,AAFO,EAAQ,KAAK,GAAM,EAAG,YAAc,EAAU,SAAY,GAGlE,EAAQ,OAAO,EAAO,EAAG,CACrB,UAAa,EAAU,UACvB,MAAS,GAAG,EAAU,KAAQ,EAC9B,UAAa,kBACb,SAAU,SAAU,EAAK,CACrB,MAAO,QAAO,GAAG,iBAAiB,EAAU,cAAkB,CAAG,CACrE,CACJ,CAAC,CAET,CAAC,CACL,CACJ,CAAC,CACL,EAEA,yBAA0B,SAAU,EAAa,EAAO,CACpD,GAAI,GAAU,OAAO,cAAc,GAAa,QAEhD,OAAO,KAAK,CACR,OAAQ,yFACR,SAAU,SAAU,EAAG,CACnB,AAAI,EAAE,SAAW,EAAE,QAAQ,QACvB,EAAE,QAAQ,QAAQ,AAAC,GAAc,CAC7B,GAAI,GAAkB,EAAQ,OAAO,GAAM,EAAG,YAAc,EAAU,SAAY,EAElF,AAAK,EAAgB,OAUjB,GAAgB,GAAG,UAAe,kBAClC,EAAgB,GAAG,SAAc,SAAU,EAAK,CAC5C,MAAO,QAAO,GAAG,iBAAiB,EAAU,QAAY,CAAG,CAC/D,GAZA,EAAQ,OAAO,EAAO,EAAG,CACrB,UAAa,EAAU,UACvB,MAAS,GAAG,EAAU,OAAU,EAChC,UAAa,kBACb,SAAU,SAAU,EAAK,CACrB,MAAO,QAAO,GAAG,iBAAiB,EAAU,QAAY,CAAG,CAC/D,CACJ,CAAC,CAOT,CAAC,CAET,CACJ,CAAC,CACL,EAEA,kBAAmB,SAAU,EAAS,EAAS,CAC3C,OAAO,KAAK,CACR,OAAQ,qEACR,KAAM,CACF,QAAS,EACT,QAAS,CACb,EACA,SAAU,SAAU,EAAG,CACnB,GAAI,GAAU,OAAO,MAAM,KAAK,EAAE,OAAO,EACzC,OAAO,UAAU,OAAQ,EAAQ,GAAG,QAAS,EAAQ,GAAG,IAAI,CAChE,CACJ,CAAC,CACL,EAEA,kBAAmB,SAAU,EAAS,EAAS,CAC3C,OAAO,KAAK,CACR,OAAQ,uEACR,KAAM,CACF,QAAS,EACT,QAAS,CACb,EACA,SAAU,SAAU,EAAG,CACnB,GAAI,GAAU,OAAO,MAAM,KAAK,EAAE,OAAO,EACzC,OAAO,UAAU,OAAQ,EAAQ,GAAG,QAAS,EAAQ,GAAG,IAAI,CAChE,CACJ,CAAC,CACL,EAOA,mBAAoB,SAAU,EAAa,CACvC,MAAI,GAAE,QAAQ,CAAW,GAAK,EAAY,OAAS,EACxC,CAAC,EAAY,GAAG,UAEpB,EACX,EAQA,uBAAwB,SAAU,EAAK,EAAkB,CACrD,GAAM,GAAO,EAAI,IAAO,GACxB,MAAI,MAAK,mBAAmB,CAAI,GAC5B,GAAI,IAAO,GAAoB,EAAK,OAAO,CAAC,GAEzC,CACX,EACA,iBAAkB,SAAU,EAAQ,CAEhC,GAAI,GAAiB,OAAO,MAAM,QAAQ,CAAM,EAC5C,EAAkB,OAAO,SAAS,qBAAqB,EACvD,EAEJ,MAAI,IAAmB,EAAgB,GACnC,EAAU,EAAgB,GAAgB,IAAI,GAAQ,EAAK,GAAG,EAE9D,EAAU,EAAE,IAAI,OAAO,IAAI,KAAmB,SAAU,EAAG,CAAE,MAAO,GAAE,IAAM,CAAC,EAAE,KAAK,EAIjF,EAAQ,OAAO,CAAC,EAAO,EAAO,IAAS,EAAK,QAAQ,CAAK,IAAM,CAAK,CAC/E,EACA,iBAAkB,SAAU,EAAQ,CAEhC,GAAI,GAAU,KAAK,iBAAiB,CAAM,EAC1C,MAAI,GAAQ,SAAS,OAAO,SAAS,YAAY,CAAM,CAAC,EAC7C,OAAO,SAAS,YAAY,CAAM,EAElC,EAAQ,EAEvB,EACA,mCAAoC,SAAU,EAAK,EAAI,EAAI,EAAiB,EAAW,EAAkB,CACrG,GAAI,EAAI,GAAmB,CACvB,GAAI,GAAK,EAAI,IAAoB,CAAC,EAClC,OAAS,GAAI,EAAG,EAAI,EAAG,OAAQ,IAC3B,EAAG,GAAG,GAAa,EAAI,GAE3B,OAAO,cAAc,CAAe,CACxC,CACJ,EACA,eAAgB,SAAU,EAAS,EAAe,CAC9C,OAAO,MAAM,aAAa,EAAS,UAAY,CAC3C,GAAI,GAAU,OAAO,MAAM,YAAY,CAAO,EAC9C,OAAS,CAAC,EAAK,IAAU,QAAO,QAAQ,CAAa,EACjD,EAAQ,GAAO,EAEnB,OAAO,GAAG,KAAK,iBAAiB,EAAS,KAAM,KAAM,CAAO,CAChE,CAAC,CACL,EAGA,mBAAoB,IAAM,CACtB,GAAI,OAAO,KAAK,UAAY,CAAC,OAAO,KAAK,SAAS,SAAU,CACxD,GAAM,GAAmB,8EACnB,EAAc,2DACd,EAAM,GAAG,mEAAoE,CAAC,EAAkB,CAAW,CAAC,EAClH,OAAO,SAAS,CAAG,CACvB,CAEJ,CACJ,CAAC,EAED,QAAQ,MAAM,uBAAyB,SAAU,EAAM,CACnD,GAAM,GAAM,EAAK,IACX,EAAkB,EAAK,iBAAmB,YAC1C,EAAa,EAAK,YAAc,YAEtC,KAAK,KAAO,CAAC,EACb,GAAM,GAAS,GAAI,QAAO,GAAG,OAAO,CAChC,MAAO,GAAG,uBAAuB,EACjC,OAAQ,CACJ,CAAE,UAAW,gBAAiB,MAAO,GAAG,OAAO,CAAE,EACjD,CACI,UAAW,oBAAqB,UAAW,QAAS,gBAAiB,GACrE,cAAe,GAAM,KAAM,KAAK,KAChC,SAAU,IACC,KAAK,KAEhB,OAAQ,CAAC,CACL,UAAW,OACX,UAAW,UACX,OAAQ,CACZ,EAAG,CACC,UAAW,OACX,UAAW,YACX,QAAS,OACT,aAAc,EACd,UAAW,EACX,MAAO,GAAG,WAAW,CACzB,EAAG,CACC,UAAW,OACX,UAAW,iBACX,QAAS,OACT,QAAS,GACT,aAAc,EACd,MAAO,GAAG,gBAAgB,EAC1B,SAAU,UAAY,CAClB,GAAM,GAAY,KAAK,UAAU,EAC3B,EAAY,KAAK,SAAS,oBAAoB,UAAU,UAAU,EACxE,AAAI,GAAa,GACb,OAAO,KAAK,CACR,OAAQ,2CACR,KAAM,CACF,UAAW,EACX,UAAW,CACf,EACA,SAAU,AAAC,GAAM,CACb,KAAK,SAAS,oBACT,WAAW,UAAU,EAAE,SAAW,CAAC,CAC5C,CACJ,CAAC,CAET,EACA,UAAW,AAAC,GACD,EACH,MAAO,gFACP,QAAS,CACL,UAAW,EAAE,SACjB,CACJ,EAER,EAAG,CACC,UAAW,OACX,UAAW,YACX,QAAS,YACT,QAAS,GACT,aAAc,EACd,MAAO,GAAG,WAAW,EACrB,SAAU,UAAY,CAClB,GAAM,GAAY,KAAK,UAAU,EAC3B,EAAY,KAAK,SAAS,oBAAoB,UAAU,UAAU,EACxE,AAAI,GAAa,GACb,OAAO,KAAK,CACR,OAAQ,2CACR,KAAM,CACF,UAAW,EACX,UAAW,CACf,EACA,SAAU,AAAC,GAAM,CACb,KAAK,SAAS,oBACT,WAAW,UAAU,EAAE,SAAW,CAAC,CAC5C,CACJ,CAAC,CAET,CACJ,EAAG,CACC,UAAW,QACX,UAAW,aACX,QAAS,EACT,UAAW,EACX,aAAc,EACd,MAAO,GAAG,eAAe,CAC7B,CAAC,CACL,CACJ,EACA,eAAgB,UAAY,CAQxB,AAN0B,AADb,KAAK,WAAW,EAAE,kBACA,OAAO,GAAK,CACvC,GAAI,EAAE,gBAAkB,EAAE,WAAa,EAAE,eACrC,MAAO,EAEf,CAAC,EAEiB,QAAQ,GAAK,CAC3B,GAAI,GAAM,OAAO,QAAQ,EAAK,cAAe,EAAE,OAAO,EAClD,EAAM,KACV,AAAI,EAAI,UAAY,kBAChB,EAAM,EAAI,aAEV,EAAM,EAAI,IAEd,EAAI,GAAc,EAAE,eACpB,OAAO,MAAM,UAAU,EAAI,QAAS,EAAI,KAAM,MAAO,CAAG,EACxD,OAAO,MAAM,UAAU,EAAI,QAAS,EAAI,KAAM,EAAK,oBAAqB,EAAE,SAAS,EACnF,EAAI,QAAQ,EAAY,EAAI,QAAS,EAAI,IAAI,CACjD,CAAC,EAED,cAAc,EAAK,aAAa,EAChC,KAAK,KAAK,CACd,EACA,qBAAsB,GAAG,QAAQ,CACrC,CAAC,EAED,EAAI,IAAI,EAAK,eAAe,QAAQ,GAAK,CACrC,AAAI,EAAC,EAAK,WAAa,EAAK,UAAU,CAAC,IACnC,EAAO,YAAY,kBAAkB,GAAG,KAAK,KAAK,CAC9C,QAAW,EAAE,KACb,UAAa,EAAE,GACf,UAAa,EAAE,GACf,WAAc,EAAE,UACpB,CAAC,CAET,CAAC,EAED,KAAK,KAAO,EAAO,YAAY,kBAAkB,GAAG,KACpD,EAAO,YAAY,kBAAkB,KAAK,QAAQ,EAClD,EAAO,KAAK,CAChB,EAEA,QAAQ,MAAM,mBAAqB,SAAU,EAAM,CAC/C,GAAM,GAAM,EAAK,IACX,EAAkB,MAAO,GAAK,gBAAmB,YAAe,GAAO,EAAK,eAC5E,EAAiB,MAAO,GAAK,gBAAmB,YAAe,QAAU,EAAK,cAC9E,EAAa,OAAO,SAAS,GAAG,EAAI,IAAI,cAAc,EACtD,EAAgB,AAAC,GAAc,EAAW,OAAO,KAAK,GAAK,EAAE,WAAa,CAAS,EAAE,UAE3F,KAAK,KAAO,EAAI,IAAI,EAAK,eAAe,IAAI,AAAC,GAClC,EACH,QAAW,EAAE,KACb,KAAQ,EAAE,KACV,UAAa,EAAE,UACf,cAAiB,EAAE,cACnB,cAAiB,EAAE,cACnB,kBAAqB,EAAE,kBACvB,IAAO,EAAE,IACT,KAAQ,EAAE,KACV,IAAO,EAAE,IACT,UAAa,EAAE,UACf,gBAAmB,EAAE,gBACrB,mBAAsB,EAAE,kBAC5B,EACH,EAED,GAAM,GAAS,CAAC,CACZ,UAAW,OACX,UAAW,UACX,UAAW,EACX,OAAQ,CACZ,EAAG,CACC,UAAW,OACX,UAAW,YACX,QAAS,OACT,aAAc,EACd,UAAW,EACX,SAAU,EACV,MAAO,GAAG,WAAW,EACrB,UAAW,UAAY,CACnB,GAAI,GACJ,MAAI,GAAI,IAAI,SAAW,cACnB,EAAU,CAAE,cAAiB,CAAE,EACxB,EAAI,IAAI,SAAW,kBAC1B,CAAI,EAAI,IAAI,iBACR,AAAI,EAAI,IAAI,2BACR,EAAU,CAAE,uBAA0B,CAAE,EAExC,EAAU,CAAE,cAAiB,CAAE,EAGnC,EAAU,CAAE,iBAAoB,CAAE,GAGnC,CACH,MAAO,yCACP,QAAS,CACb,CACJ,CACJ,EAAG,CACC,UAAW,OACX,UAAW,MACX,QAAS,MACT,UAAW,EACX,MAAO,GAAG,KAAK,EACf,KAAM,EACN,SAAU,UAAY,CAClB,OAAO,KAAK,CACR,OAAQ,uDACR,KAAM,CAAE,UAAW,KAAK,IAAI,UAAW,IAAK,KAAK,KAAM,EACvD,SAAU,GAAK,CACX,GAAI,CAAC,EAAE,IAAK,CACR,GAAI,KAAK,IAAI,mBAAqB,EAAE,QAAQ,kBAAmB,OAE/D,GAAM,GAAU,KAAK,IAAI,QACzB,OAAO,YAAY,YAAY,GAAG,KAAK,KAAK,GAAO,CAC/C,GAAI,EAAI,SAAW,EACf,SAAI,kBAAoB,EAAE,QAAQ,kBAClC,OAAO,YAAY,YAAY,KAAK,QAAQ,EACrC,EAEf,CAAC,CACL,CACJ,CACJ,CAAC,CACL,CACJ,EAAG,CACC,UAAW,QACX,UAAW,MACX,QAAS,EACT,UAAW,EACX,aAAc,EACd,MAAO,GAAG,KAAK,EACf,UAAW,EAAc,KAAK,CAClC,EAAG,CACC,UAAW,WACX,UAAW,OACX,QAAS,WACT,QAAS,EACT,UAAW,EACX,aAAc,EACd,MAAO,GAAG,MAAM,EAChB,UAAW,EAAc,MAAM,CACnC,EACA,CACI,UAAW,OACX,UAAW,YACX,QAAS,EACT,UAAW,EACX,aAAc,EACd,MAAO,GAAG,WAAW,CACzB,EACC,CACO,UAAW,WACX,UAAW,qBACX,QAAS,EACT,UAAW,EACX,aAAc,EACd,MAAO,GAAG,oBAAoB,CACtC,EACA,CACQ,UAAW,QACX,UAAW,kBACX,QAAS,EACT,UAAW,EACX,aAAc,EACd,MAAO,GAAG,iBAAiB,CACnC,CAAC,EAED,AAAI,GAAI,IAAI,SAAW,eAAiB,EAAI,IAAI,SAAW,mBACvD,GAAO,OAAO,EAAG,EAAG,CAChB,UAAW,OACX,UAAW,EAAI,IAAI,SAAW,cAAgB,gBAAkB,gBAChE,aAAc,EACd,MAAO,EAAI,IAAI,SAAW,cAAgB,GAAG,eAAe,EAAI,GAAG,cAAc,EACjF,KAAM,CACV,CAAC,EACD,EAAO,OAAO,EAAG,EAAG,CAChB,UAAW,QACX,UAAW,oBACX,aAAc,EACd,MAAO,GAAG,mBAAmB,EAC7B,UAAW,EAAc,mBAAmB,CAChD,CAAC,GAGL,GAAI,QAAO,GAAG,OAAO,CACjB,MAAO,GAAG,cAAc,EACxB,OAAQ,CACJ,CACI,UAAW,cACX,UAAW,QACX,MAAO,QACP,gBAAiB,EACjB,cAAe,GACf,KAAM,EACN,KAAM,KAAK,KACX,SAAU,IACC,KAAK,KAEhB,OAAQ,CACZ,CACJ,EACA,eAAgB,UAAY,CACxB,GAAM,GAAc,KAAK,WAAW,EAAE,YAAe,OAAO,AAAC,GAAS,CAAC,CAAC,EAAK,SAAS,EACtF,OAAO,KAAK,CACR,OAAQ,4CACR,OAAQ,GACR,KAAM,CACF,eAAkB,EAAI,IAAI,QAC1B,YAAe,EACf,oBAAuB,EAAI,IAAI,KAC/B,cAAiB,CACrB,EACA,SAAU,UAAY,CAClB,EAAI,WAAW,CACnB,CACJ,CAAC,EACD,KAAK,KAAK,EACV,cAAc,OAAO,CACzB,EACA,qBAAsB,GAAG,QAAQ,CACrC,CAAC,EAAE,KAAK,CACZ,EAEA,QAAQ,MAAM,gBAAkB,SAAU,EAAM,CAC5C,YAAgB,CACZ,GAAI,EAAE,QAAQ,QAAQ,IAAI,KAAK,GAAK,QAAQ,IAAI,MAAM,OAAS,EAAG,CAE9D,AAAK,QAAQ,IAAI,MAAM,GAAG,WACtB,SAAQ,IAAI,MAAQ,QAAQ,IAAI,MAAM,OAAO,CAAC,GAIlD,GAAI,GAAgB,OAAO,KAAK,aAAa,QAAQ,QAAS,OAAO,EAAE,QAInE,EAAiB,KACrB,OAAO,SAAS,CAAa,EAAE,OAAO,QAAQ,SAAU,EAAG,CACvD,AAAI,EAAE,UAAY,EAAK,gBAAgB,GAAiB,EAAE,UAC9D,CAAC,EAGD,GAAI,GAAc,GACd,EAAe,CAAC,EAEpB,EAAE,KAAK,QAAQ,IAAI,MAAO,SAAU,EAAG,EAAG,CACtC,EAAK,YAAY,QAAQ,SAAU,EAAK,CACpC,AAAI,EAAE,IAAmB,GACrB,GAAc,GACd,AAAI,EAAa,EAAE,WACf,EAAa,EAAE,YAAc,IAAI,EAAE,GAAG,EAEtC,EAAa,EAAE,WAAa,IAAI,EAAE,GAAG,EAEjD,CAAC,CACL,CAAC,EAEG,GACA,EAAK,YAAY,QAAQ,SAAU,EAAK,CAWpC,GAVA,OAAO,MAAM,SAAS,EAAK,eAAgB,EAAK,SAAU,EAAG,CACzD,GAAI,GAAa,OAAO,MAAM,QAAQ,EAAK,eAAgB,CAAG,EAC9D,EAAE,KAAK,EAAW,OAAS,CAAC,EAAG,SAAU,EAAG,EAAK,CAC7C,GAAI,EAAI,IAAM,IAAI,EAAa,EAAI,UAAU,EACzC,SAAc,GACP,EAEf,CAAC,CACL,CAAC,EAEG,EAAa,CACb,OAAO,SAAS,GAAG,+CACf,CAAC,EAAK,eAAgB,CAAG,CAAC,CAAC,EAC/B,MACJ,CAEJ,CAAC,CAET,CAEA,MAAO,QAAO,KAAK,CAGf,KAAM,OACN,OAAQ,+BACR,KAAM,CACF,OAAU,EAAK,OACf,aAAgB,EAAK,YACrB,WAAc,QAAQ,IACtB,KAAQ,EAAK,IACjB,EACA,SAAU,SAAU,EAAG,CACnB,GAAI,CAAC,EAAE,IAAK,CACR,GAAI,GAAM,OAAO,MAAM,KAAK,EAAE,OAAO,EACrC,QAAQ,MAAM,EACd,QAAQ,QAAQ,CACpB,CACJ,CACJ,CAAC,CACL,CAEA,GAAI,GAAa,CAAC,EAalB,GAZI,EAAK,mBACL,GAAW,QAAU,EAAK,mBAG1B,EAAK,kBACL,GAAW,MAAQ,EAAK,kBAGxB,GAAW,SAAW,EAAW,QACjC,GAAK,UAAY,IAAM,GAGvB,EAAK,eAAgB,CACrB,GAAM,GAAI,GAAI,QAAO,GAAG,KAAK,kBAAkB,CAC3C,QAAS,EAAK,eACd,OAAQ,EAAK,OACb,WAAY,EAAK,YAAc,OAC/B,QAAS,EAAK,QACd,UAAW,EAAK,UAChB,kBAAmB,EACnB,2BAA4B,EAAK,2BACjC,gBAAiB,EAAK,gBACtB,cAAe,EAAK,cACpB,KAAM,EAAK,KACX,OAAQ,SAAU,EAAY,EAAM,CAChC,GAAI,GAAS,EACb,GAAI,EAAO,SAAW,EAAG,CACrB,OAAO,SAAS,GAAG,oBAAqB,CAAC,EAAK,cAAc,CAAC,CAAC,EAC9D,MACJ,CACA,EAAK,YAAc,EACf,EAAK,4BAEL,GAAK,KAAO,GAEhB,EAAE,OAAO,KAAK,EACd,EAAK,CACT,CACJ,CAAC,EAED,MAAO,EACX,CAEA,AAAI,EAAK,aACL,GAAK,YAAc,CAAC,EAAK,WAAW,EACpC,EAAK,EAEb,EAEA,OAAO,KAAK,gBAAgB,KAAU,SAAU,EAAO,EAAK,CACxD,MAAI,IAAO,GAAS,EAAI,WAAa,EAAI,YAAc,GAAS,EAAI,YAAc,EACvE,EAAQ,KAAO,EAAI,UACnB,CAAC,GAAS,EAAI,SAAW,EAAI,UAE7B,EAAI,UAGJ,CAEf,EAEA,OAAO,KAAK,gBAAgB,SAAc,SAAU,EAAO,EAAK,CAC5D,MAAI,IAAO,GAAS,EAAI,eAAiB,EAAI,gBAAkB,GAAS,EAAI,WAAa,EAC9E,EAAQ,KAAO,EAAI,cACnB,CAAC,GAAS,EAAI,SAAW,EAAI,cAE7B,EAAI,SAGJ,CAEf,EAEA,OAAO,KAAK,gBAAgB,QAAa,SAAU,EAAO,EAAK,CAC3D,MAAI,IAAO,GAAS,EAAI,cAAgB,EAAI,eAAiB,GAAS,EAAI,UAAY,EAC3E,EAAQ,KAAO,EAAI,aACnB,CAAC,GAAS,EAAI,SAAW,EAAI,aAE7B,EAAI,QAGJ,CAEf,EAGA,EAAE,QAAQ,EAAE,GAAG,YAAa,UAAY,CACpC,AAAK,OAAO,SAAS,iBAAiB,GAClC,EAAE,KAAK,CAAC,uBAAwB,cAAe,qBAC3C,gBAAiB,mBAAoB,eAAe,EAAG,SAAU,EAAG,EAAG,CACnE,OAAO,GAAG,KAAK,GAAG,EAAG,SAAU,SAAU,EAAK,CAC1C,QAAQ,gBAAgB,eAAgB,cACpC,OAAO,aAAa,SAAS,CACrC,CAAC,CACL,CAAC,CAEb,CAAC,EAGD,EAAE,QAAQ,EAAE,GAAG,YAAa,UAAY,CACpC,OAAO,KAAK,CACR,OAAQ,2FACR,SAAU,SAAU,EAAG,CACnB,AAAI,CAAC,EAAE,SAGP,EAAE,KAAK,EAAE,QAAS,SAAU,EAAI,EAAG,CAC/B,OAAO,GAAG,KAAK,GAAG,EAAG,CACjB,OAAQ,SAAU,EAAK,CACnB,AAAI,CAAC,EAAI,IAAI,yBAGb,OAAO,KAAK,CACR,OAAQ,8GACR,KAAM,CACF,QAAS,EAAI,IAAI,QACjB,KAAM,EAAI,IAAI,wBACd,SAAU,EAAI,IAAI,QACtB,EACA,SAAU,SAAU,EAAG,CACnB,AAAI,GAAK,EAAE,SACP,GAAI,UAAU,WAAY,UAAY,CAClC,MAAO,CACH,QAAS,CACL,KAAQ,CAAC,KAAM,EAAE,QAAQ,QAAQ,CACrC,CACJ,CACJ,CAAC,EACD,EAAI,UAAU,0BAA2B,UAAY,CACjD,MAAO,CACH,QAAS,CACL,KAAQ,CAAC,KAAM,EAAE,QAAQ,wBAAwB,CACrD,CACJ,CACJ,CAAC,EAET,CACJ,CAAC,CACL,EAEA,QAAS,SAAU,EAAK,CACpB,GAAI,EAAI,IAAI,SAAW,UAAY,EAAI,IAAI,yBACpC,CAAC,qBAAsB,gBAAgB,EAAE,SAAS,EAAI,IAAI,gBAAgB,EAC7E,OAAO,KAAK,CACR,OAAU,oBACV,KAAM,CACF,QAAS,0BACT,KAAM,EAAI,IAAI,uBAClB,EACA,SAAU,SAAU,EAAM,CACtB,GAAI,GAAW,EAAK,QAAQ,aACtB,EAAgB,CAAC,EAIvB,GAHA,EAAE,KAAK,EAAU,CAAC,EAAI,IAAU,CAC5B,EAAc,KAAK,EAAM,MAAM,CACnC,CAAC,EACG,EAAc,SAAS,EAAI,IAAI,MAAM,EAAG,CACxC,EAAI,UAAU,eAAe,EAC7B,GAAI,GAAU,CAAE,UAAa,SAAU,IAAO,GAAG,2BAA4B,CAAC,OAAO,EAAI,IAAI,aAAa,EAAE,QAAQ,EAAI,CAAC,CAAC,CAAE,EAC5H,EAAI,UAAU,mBACV,oFAE8C,EAAQ,UAAY,WAAa,EAAQ,IAAM,6BAGjG,CACJ,KACI,GAAiC,EAAK,EAAK,QAAQ,wBAAwB,CAEnF,CACJ,CAAC,UACM,EAAI,IAAI,wBAAyB,CACxC,EAAI,UAAU,eAAe,EAE7B,GAAI,GAAoB,EAAI,IAAI,kBAAoB,YAChD,CAAE,UAAa,QAAS,IAAO,4CAA6C,EAC5E,CAAE,UAAa,MAAO,IAAO,gCAAiC,EAElE,EAAI,UAAU,mBACV,oFAE8C,EAAiB,UAAY,6BAA+B,EAAiB,IAAM,6BAGrI,CACJ,CACJ,CACJ,CAAC,CACL,CAAC,CACL,CACJ,CAAC,CACL,CAAC,EAED,WAA0C,EAAK,EAA0B,CACrE,EAAI,UAAU,eAAe,EAE7B,GAAI,GACJ,AAAK,EAAI,IAAI,mBAGT,EAAkB,EAAW,EAAI,IAAI,YAAa,EAAI,IAAI,kBAAkB,EAF5E,EAAkB,EAAc,EAAI,IAAI,YAAa,EAAI,IAAI,gBAAgB,EAKjF,GAAI,GAAQ;AAAA;AAAA;AAAA,+CAG+B,EAAgB;AAAA,8BACjC,EAAgB;AAAA;AAAA,WAK1C,GAAI,EAA0B,CAC1B,GAAI,GACJ,AAAK,EAAI,IAAI,gBAGT,EAAkB,EAAW,EAAI,IAAI,cAAe,EAAI,IAAI,eAAe,EAF3E,EAAkB,EAAc,EAAI,IAAI,cAAe,EAAI,IAAI,gBAAgB,EAKnF,GAAS;AAAA;AAAA,+CAE8B,EAAgB;AAAA,8BACjC,EAAgB;AAAA;AAAA,UAG1C,CAEA,GAAS,SAET,EAAI,UAAU,mBAAmB,CAAK,CAC1C,CAEA,WAAuB,EAAW,EAAkB,CAChD,GAAM,GAAO,OAAO,CAAS,EAAE,KAAK,OAAO,CAAC,EACtC,EAAe,GAAQ,MAAQ,OAAO,SAAS,CAAI,EAAE,SAAS,EAAI,SACpE,EAAa,GAAgB,UAAY,GAAoB,YAAe,MAAQ,QACxF,MAAO,CAAE,aAAgB,EAAc,UAAa,CAAU,CAClE,CAEA,WAAoB,EAAU,EAAQ,CAElC,MAAI,AADc,QAAO,CAAQ,EAAE,KAAK,OAAO,CAAM,CAAC,GACrC,EACN,CAAE,aAAgB,YAAa,UAAa,OAAQ,EAEpD,CAAE,aAAgB,SAAU,UAAa,KAAM,CAE9D,CAEA,WAAgC,EAAY,EAAgB,EAAS,EAAU,CAC3E,GAAI,GAAW,EAAE,OAAO,EAAE,IAAI,CAAE,gBAAiB,OAAQ,aAAc,MAAO,CAAC,EAC1E,SAAS,CAAc,EAI5B,AAHW,EAAE,0CAA0C,YAAqB,EACvE,SAAS,CAAQ,EAEjB,GAAG,QAAS,UAAY,CACzB,EAAQ,2BAA2B,EAAS,IAAK,EAAS,IAAK,GAAI,GAAI,EAAI,CAC/E,CAAC,CACL",
  "names": []
}
