{
  "version": 3,
  "sources": ["../../../../../apps/coatserve/coatserve/public/js/utils.js"],
  "sourcesContent": ["// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\n// License: GNU General Public License v3. See license.txt\nfrappe.provide(\"erpnext\");\nfrappe.provide(\"erpnext.utils\");\n\n$.extend(erpnext, {\n    get_currency: function (company) {\n        if (!company && cur_frm)\n            company = cur_frm.doc.company;\n        if (company)\n            return frappe.get_doc(\":Company\", company).default_currency || frappe.boot.sysdefaults.currency;\n        else\n            return frappe.boot.sysdefaults.currency;\n    },\n\n    get_presentation_currency_list: () => {\n        const docs = frappe.boot.docs;\n        let currency_list = docs.filter(d => d.doctype === \":Currency\").map(d => d.name);\n        currency_list.unshift(\"\");\n        return currency_list;\n    },\n\n    toggle_naming_series: function () {\n        if (cur_frm.fields_dict.naming_series) {\n            cur_frm.toggle_display(\"naming_series\", cur_frm.doc.__islocal ? true : false);\n        }\n    },\n\n    hide_company: function () {\n        if (cur_frm.fields_dict.company) {\n            var companies = Object.keys(locals[\":Company\"] || {});\n            if (companies.length === 1) {\n                if (!cur_frm.doc.company) cur_frm.set_value(\"company\", companies[0]);\n                cur_frm.toggle_display(\"company\", false);\n            } else if (erpnext.last_selected_company) {\n                if (!cur_frm.doc.company) cur_frm.set_value(\"company\", erpnext.last_selected_company);\n            }\n        }\n    },\n\n    is_perpetual_inventory_enabled: function (company) {\n        if (company) {\n            return frappe.get_doc(\":Company\", company).enable_perpetual_inventory\n        }\n    },\n\n    stale_rate_allowed: () => {\n        return cint(frappe.boot.sysdefaults.allow_stale);\n    },\n\n    setup_serial_or_batch_no: function () {\n        let grid_row = cur_frm.open_grid_row();\n        if (!grid_row || !grid_row.grid_form.fields_dict.serial_no ||\n            grid_row.grid_form.fields_dict.serial_no.get_status() !== \"Write\") return;\n\n        frappe.model.get_value('Item', { 'name': grid_row.doc.item_code },\n            ['has_serial_no', 'has_batch_no'], ({ has_serial_no, has_batch_no }) => {\n                Object.assign(grid_row.doc, { has_serial_no, has_batch_no });\n\n                if (has_serial_no) {\n                    attach_selector_button(__(\"Add Serial No\"),\n                        grid_row.grid_form.fields_dict.serial_no.$wrapper, this, grid_row);\n                } else if (has_batch_no) {\n                    attach_selector_button(__(\"Pick Batch No\"),\n                        grid_row.grid_form.fields_dict.batch_no.$wrapper, this, grid_row);\n                }\n            }\n        );\n    },\n\n    route_to_adjustment_jv: (args) => {\n        frappe.model.with_doctype('Journal Entry', () => {\n            // route to adjustment Journal Entry to handle Account Balance and Stock Value mismatch\n            let journal_entry = frappe.model.get_new_doc('Journal Entry');\n\n            args.accounts.forEach((je_account) => {\n                let child_row = frappe.model.add_child(journal_entry, \"accounts\");\n                child_row.account = je_account.account;\n                child_row.debit_in_account_currency = je_account.debit_in_account_currency;\n                child_row.credit_in_account_currency = je_account.credit_in_account_currency;\n                child_row.party_type = \"\";\n            });\n            frappe.set_route('Form', 'Journal Entry', journal_entry.name);\n        });\n    },\n\n    route_to_pending_reposts: (args) => {\n        frappe.set_route('List', 'Repost Item Valuation', args);\n    },\n});\n\n\n$.extend(erpnext.utils, {\n    set_party_dashboard_indicators: function (frm) {\n        if (frm.doc.__onload && frm.doc.__onload.dashboard_info) {\n            var company_wise_info = frm.doc.__onload.dashboard_info;\n            if (company_wise_info.length > 1) {\n                company_wise_info.forEach(function (info) {\n                    erpnext.utils.add_indicator_for_multicompany(frm, info);\n                });\n            } else if (company_wise_info.length === 1) {\n                frm.dashboard.add_indicator(__('Annual Billing: {0}',\n                    [format_currency(company_wise_info[0].billing_this_year, company_wise_info[0].currency)]), 'blue');\n                frm.dashboard.add_indicator(__('Total Unpaid: {0}',\n                    [format_currency(company_wise_info[0].total_unpaid, company_wise_info[0].currency)]),\n                    company_wise_info[0].total_unpaid ? 'orange' : 'green');\n\n                if (company_wise_info[0].loyalty_points) {\n                    frm.dashboard.add_indicator(__('Loyalty Points: {0}',\n                        [company_wise_info[0].loyalty_points]), 'blue');\n                }\n            }\n        }\n    },\n\n    add_indicator_for_multicompany: function (frm, info) {\n        frm.dashboard.stats_area.show();\n        frm.dashboard.stats_area_row.addClass('flex');\n        frm.dashboard.stats_area_row.css('flex-wrap', 'wrap');\n\n        var color = info.total_unpaid ? 'orange' : 'green';\n\n        var indicator = $('<div class=\"flex-column col-xs-6\">' +\n            '<div style=\"margin-top:10px\"><h6>' + info.company + '</h6></div>' +\n\n            '<div class=\"badge-link small\" style=\"margin-bottom:10px\"><span class=\"indicator blue\">' +\n            'Annual Billing: ' + format_currency(info.billing_this_year, info.currency) + '</span></div>' +\n\n            '<div class=\"badge-link small\" style=\"margin-bottom:10px\">' +\n            '<span class=\"indicator ' + color + '\">Total Unpaid: '\n            + format_currency(info.total_unpaid, info.currency) + '</span></div>' +\n\n\n            '</div>').appendTo(frm.dashboard.stats_area_row);\n\n        if (info.loyalty_points) {\n            $('<div class=\"badge-link small\" style=\"margin-bottom:10px\"><span class=\"indicator blue\">' +\n                'Loyalty Points: ' + info.loyalty_points + '</span></div>').appendTo(indicator);\n        }\n\n        return indicator;\n    },\n\n    get_party_name: function (party_type) {\n        var dict = {\n            'Customer': 'customer_name', 'Supplier': 'supplier_name', 'Employee': 'employee_name',\n            'Member': 'member_name'\n        };\n        return dict[party_type];\n    },\n\n    copy_value_in_all_rows: function (doc, dt, dn, table_fieldname, fieldname) {\n        var d = locals[dt][dn];\n        if (d[fieldname]) {\n            var cl = doc[table_fieldname] || [];\n            for (var i = 0; i < cl.length; i++) {\n                if (!cl[i][fieldname]) cl[i][fieldname] = d[fieldname];\n            }\n        }\n        refresh_field(table_fieldname);\n    },\n\n    get_terms: function (tc_name, doc, callback) {\n        if (tc_name) {\n            return frappe.call({\n                method: 'erpnext.setup.doctype.terms_and_conditions.terms_and_conditions.get_terms_and_conditions',\n                args: {\n                    template_name: tc_name,\n                    doc: doc\n                },\n                callback: function (r) {\n                    callback(r)\n                }\n            });\n        }\n    },\n\n    make_bank_account: function (doctype, docname) {\n        frappe.call({\n            method: \"erpnext.accounts.doctype.bank_account.bank_account.make_bank_account\",\n            args: {\n                doctype: doctype,\n                docname: docname\n            },\n            freeze: true,\n            callback: function (r) {\n                var doclist = frappe.model.sync(r.message);\n                frappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\n            }\n        })\n    },\n\n    add_dimensions: function (report_name, index) {\n        let filters = frappe.query_reports[report_name].filters;\n\n        frappe.call({\n            method: \"erpnext.accounts.doctype.accounting_dimension.accounting_dimension.get_dimensions\",\n            callback: function (r) {\n                let accounting_dimensions = r.message[0];\n                accounting_dimensions.forEach((dimension) => {\n                    let found = filters.some(el => el.fieldname === dimension['fieldname']);\n\n                    if (!found) {\n                        filters.splice(index, 0, {\n                            \"fieldname\": dimension[\"fieldname\"],\n                            \"label\": __(dimension[\"label\"]),\n                            \"fieldtype\": \"MultiSelectList\",\n                            get_data: function (txt) {\n                                return frappe.db.get_link_options(dimension[\"document_type\"], txt);\n                            },\n                        });\n                    }\n                });\n            }\n        });\n    },\n\n    add_inventory_dimensions: function (report_name, index) {\n        let filters = frappe.query_reports[report_name].filters;\n\n        frappe.call({\n            method: \"erpnext.stock.doctype.inventory_dimension.inventory_dimension.get_inventory_dimensions\",\n            callback: function (r) {\n                if (r.message && r.message.length) {\n                    r.message.forEach((dimension) => {\n                        let existing_filter = filters.filter(el => el.fieldname === dimension['fieldname']);\n\n                        if (!existing_filter.length) {\n                            filters.splice(index, 0, {\n                                \"fieldname\": dimension[\"fieldname\"],\n                                \"label\": __(dimension[\"doctype\"]),\n                                \"fieldtype\": \"MultiSelectList\",\n                                get_data: function (txt) {\n                                    return frappe.db.get_link_options(dimension[\"doctype\"], txt);\n                                },\n                            });\n                        } else {\n                            existing_filter[0]['fieldtype'] = \"MultiSelectList\";\n                            existing_filter[0]['get_data'] = function (txt) {\n                                return frappe.db.get_link_options(dimension[\"doctype\"], txt);\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    make_subscription: function (doctype, docname) {\n        frappe.call({\n            method: \"frappe.automation.doctype.auto_repeat.auto_repeat.make_auto_repeat\",\n            args: {\n                doctype: doctype,\n                docname: docname\n            },\n            callback: function (r) {\n                var doclist = frappe.model.sync(r.message);\n                frappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\n            }\n        })\n    },\n\n    make_pricing_rule: function (doctype, docname) {\n        frappe.call({\n            method: \"erpnext.accounts.doctype.pricing_rule.pricing_rule.make_pricing_rule\",\n            args: {\n                doctype: doctype,\n                docname: docname\n            },\n            callback: function (r) {\n                var doclist = frappe.model.sync(r.message);\n                frappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\n            }\n        })\n    },\n\n    /**\n    * Checks if the first row of a given child table is empty\n    * @param child_table - Child table Doctype\n    * @return {Boolean}\n    **/\n    first_row_is_empty: function (child_table) {\n        if ($.isArray(child_table) && child_table.length > 0) {\n            return !child_table[0].item_code;\n        }\n        return false;\n    },\n\n    /**\n    * Removes the first row of a child table if it is empty\n    * @param {_Frm} frm - The current form\n    * @param {String} child_table_name - The child table field name\n    * @return {Boolean}\n    **/\n    remove_empty_first_row: function (frm, child_table_name) {\n        const rows = frm['doc'][child_table_name];\n        if (this.first_row_is_empty(rows)) {\n            frm['doc'][child_table_name] = rows.splice(1);\n        }\n        return rows;\n    },\n    get_tree_options: function (option) {\n        // get valid options for tree based on user permission & locals dict\n        let unscrub_option = frappe.model.unscrub(option);\n        let user_permission = frappe.defaults.get_user_permissions();\n        let options;\n\n        if (user_permission && user_permission[unscrub_option]) {\n            options = user_permission[unscrub_option].map(perm => perm.doc);\n        } else {\n            options = $.map(locals[`:${unscrub_option}`], function (c) { return c.name; }).sort();\n        }\n\n        // filter unique values, as there may be multiple user permissions for any value\n        return options.filter((value, index, self) => self.indexOf(value) === index);\n    },\n    get_tree_default: function (option) {\n        // set default for a field based on user permission\n        let options = this.get_tree_options(option);\n        if (options.includes(frappe.defaults.get_default(option))) {\n            return frappe.defaults.get_default(option);\n        } else {\n            return options[0];\n        }\n    },\n    overrides_parent_value_in_all_rows: function (doc, dt, dn, table_fieldname, fieldname, parent_fieldname) {\n        if (doc[parent_fieldname]) {\n            let cl = doc[table_fieldname] || [];\n            for (let i = 0; i < cl.length; i++) {\n                cl[i][fieldname] = doc[parent_fieldname];\n            }\n            frappe.refresh_field(table_fieldname);\n        }\n    },\n    create_new_doc: function (doctype, update_fields) {\n        frappe.model.with_doctype(doctype, function () {\n            var new_doc = frappe.model.get_new_doc(doctype);\n            for (let [key, value] of Object.entries(update_fields)) {\n                new_doc[key] = value;\n            }\n            frappe.ui.form.make_quick_entry(doctype, null, null, new_doc);\n        });\n    },\n\n    // check if payments app is installed on site, if not warn user.\n    check_payments_app: () => {\n        if (frappe.boot.versions && !frappe.boot.versions.payments) {\n            const marketplace_link = '<a href=\"https://frappecloud.com/marketplace/apps/payments\">Marketplace</a>'\n            const github_link = '<a href=\"https://github.com/frappe/payments/\">GitHub</a>'\n            const msg = __(\"payments app is not installed. Please install it from {0} or {1}\", [marketplace_link, github_link])\n            frappe.msgprint(msg);\n        }\n\n    },\n});\n\nerpnext.utils.select_alternate_items = function (opts) {\n    const frm = opts.frm;\n    const warehouse_field = opts.warehouse_field || 'warehouse';\n    const item_field = opts.item_field || 'item_code';\n\n    this.data = [];\n    const dialog = new frappe.ui.Dialog({\n        title: __(\"Select Alternate Item\"),\n        fields: [\n            { fieldtype: 'Section Break', label: __('Items') },\n            {\n                fieldname: \"alternative_items\", fieldtype: \"Table\", cannot_add_rows: true,\n                in_place_edit: true, data: this.data,\n                get_data: () => {\n                    return this.data;\n                },\n                fields: [{\n                    fieldtype: 'Data',\n                    fieldname: \"docname\",\n                    hidden: 1\n                }, {\n                    fieldtype: 'Link',\n                    fieldname: \"item_code\",\n                    options: 'Item',\n                    in_list_view: 1,\n                    read_only: 1,\n                    label: __('Item Code')\n                }, {\n                    fieldtype: 'Link',\n                    fieldname: \"alternate_item\",\n                    options: 'Item',\n                    default: \"\",\n                    in_list_view: 1,\n                    label: __('Alternate Item'),\n                    onchange: function () {\n                        const item_code = this.get_value();\n                        const warehouse = this.grid_row.on_grid_fields_dict.warehouse.get_value();\n                        if (item_code && warehouse) {\n                            frappe.call({\n                                method: \"erpnext.stock.utils.get_latest_stock_qty\",\n                                args: {\n                                    item_code: item_code,\n                                    warehouse: warehouse\n                                },\n                                callback: (r) => {\n                                    this.grid_row.on_grid_fields_dict\n                                        .actual_qty.set_value(r.message || 0);\n                                }\n                            })\n                        }\n                    },\n                    get_query: (e) => {\n                        return {\n                            query: \"erpnext.stock.doctype.item_alternative.item_alternative.get_alternative_items\",\n                            filters: {\n                                item_code: e.item_code\n                            }\n                        };\n                    }\n                }, {\n                    fieldtype: 'Link',\n                    fieldname: \"warehouse\",\n                    options: 'Warehouse',\n                    default: \"\",\n                    in_list_view: 1,\n                    label: __('Warehouse'),\n                    onchange: function () {\n                        const warehouse = this.get_value();\n                        const item_code = this.grid_row.on_grid_fields_dict.item_code.get_value();\n                        if (item_code && warehouse) {\n                            frappe.call({\n                                method: \"erpnext.stock.utils.get_latest_stock_qty\",\n                                args: {\n                                    item_code: item_code,\n                                    warehouse: warehouse\n                                },\n                                callback: (r) => {\n                                    this.grid_row.on_grid_fields_dict\n                                        .actual_qty.set_value(r.message || 0);\n                                }\n                            })\n                        }\n                    },\n                }, {\n                    fieldtype: 'Float',\n                    fieldname: \"actual_qty\",\n                    default: 0,\n                    read_only: 1,\n                    in_list_view: 1,\n                    label: __('Available Qty')\n                }]\n            },\n        ],\n        primary_action: function () {\n            const args = this.get_values()[\"alternative_items\"];\n            const alternative_items = args.filter(d => {\n                if (d.alternate_item && d.item_code != d.alternate_item) {\n                    return true;\n                }\n            });\n\n            alternative_items.forEach(d => {\n                let row = frappe.get_doc(opts.child_doctype, d.docname);\n                let qty = null;\n                if (row.doctype === 'Work Order Item') {\n                    qty = row.required_qty;\n                } else {\n                    qty = row.qty;\n                }\n                row[item_field] = d.alternate_item;\n                frappe.model.set_value(row.doctype, row.name, 'qty', qty);\n                frappe.model.set_value(row.doctype, row.name, opts.original_item_field, d.item_code);\n                frm.trigger(item_field, row.doctype, row.name);\n            });\n\n            refresh_field(opts.child_docname);\n            this.hide();\n        },\n        primary_action_label: __('Update')\n    });\n\n    frm.doc[opts.child_docname].forEach(d => {\n        if (!opts.condition || opts.condition(d)) {\n            dialog.fields_dict.alternative_items.df.data.push({\n                \"docname\": d.name,\n                \"item_code\": d[item_field],\n                \"warehouse\": d[warehouse_field],\n                \"actual_qty\": d.actual_qty\n            });\n        }\n    })\n\n    this.data = dialog.fields_dict.alternative_items.df.data;\n    dialog.fields_dict.alternative_items.grid.refresh();\n    dialog.show();\n}\n\nerpnext.utils.update_child_items = function (opts) {\n    const frm = opts.frm;\n    const cannot_add_row = (typeof opts.cannot_add_row === 'undefined') ? true : opts.cannot_add_row;\n    const child_docname = (typeof opts.cannot_add_row === 'undefined') ? \"items\" : opts.child_docname;\n    const child_meta = frappe.get_meta(`${frm.doc.doctype} Item`);\n    const get_precision = (fieldname) => child_meta.fields.find(f => f.fieldname == fieldname).precision;\n\n    this.data = frm.doc[opts.child_docname].map((d) => {\n        return {\n            \"docname\": d.name,\n            \"name\": d.name,\n            \"item_code\": d.item_code,\n            \"delivery_date\": d.delivery_date,\n            \"schedule_date\": d.schedule_date,\n            \"conversion_factor\": d.conversion_factor,\n            \"qty\": d.qty,\n            \"rate\": d.rate,\n            \"uom\": d.uom,\n            \"pack_size\": d.pack_size,\n            \"quantity_ltr_kg\": d.quantity_ltr_kg,\n            \"price_per_lt_or_kg\": d.price_per_lt_or_kg\n        }\n    });\n\n    const fields = [{\n        fieldtype: 'Data',\n        fieldname: \"docname\",\n        read_only: 1,\n        hidden: 1,\n    }, {\n        fieldtype: 'Link',\n        fieldname: \"item_code\",\n        options: 'Item',\n        in_list_view: 1,\n        read_only: 0,\n        disabled: 0,\n        label: __('Item Code'),\n        get_query: function () {\n            let filters;\n            if (frm.doc.doctype == 'Sales Order') {\n                filters = { \"is_sales_item\": 1 };\n            } else if (frm.doc.doctype == 'Purchase Order') {\n                if (frm.doc.is_subcontracted) {\n                    if (frm.doc.is_old_subcontracting_flow) {\n                        filters = { \"is_sub_contracted_item\": 1 };\n                    } else {\n                        filters = { \"is_stock_item\": 0 };\n                    }\n                } else {\n                    filters = { \"is_purchase_item\": 1 };\n                }\n            }\n            return {\n                query: \"erpnext.controllers.queries.item_query\",\n                filters: filters\n            };\n        }\n    }, {\n        fieldtype: 'Link',\n        fieldname: 'uom',\n        options: 'UOM',\n        read_only: 0,\n        label: __('UOM'),\n        reqd: 1,\n        onchange: function () {\n            frappe.call({\n                method: \"erpnext.stock.get_item_details.get_conversion_factor\",\n                args: { item_code: this.doc.item_code, uom: this.value },\n                callback: r => {\n                    if (!r.exc) {\n                        if (this.doc.conversion_factor == r.message.conversion_factor) return;\n\n                        const docname = this.doc.docname;\n                        dialog.fields_dict.trans_items.df.data.some(doc => {\n                            if (doc.docname == docname) {\n                                doc.conversion_factor = r.message.conversion_factor;\n                                dialog.fields_dict.trans_items.grid.refresh();\n                                return true;\n                            }\n                        })\n                    }\n                }\n            });\n        }\n    }, {\n        fieldtype: 'Float',\n        fieldname: \"qty\",\n        default: 0,\n        read_only: 0,\n        in_list_view: 1,\n        label: __('Qty'),\n        precision: get_precision(\"qty\")\n    }, {\n        fieldtype: 'Currency',\n        fieldname: \"rate\",\n        options: \"currency\",\n        default: 0,\n        read_only: 0,\n        in_list_view: 1,\n        label: __('Rate'),\n        precision: get_precision(\"rate\")\n    },\n    {\n        fieldtype: 'Data',\n        fieldname: \"pack_size\",\n        default: 0,\n        read_only: 1,\n        in_list_view: 1,\n        label: __('Pack Size'),\n    }\n    ,{\n            fieldtype: 'Currency',\n            fieldname: \"price_per_lt_or_kg\",\n            default: 0,\n            read_only: 1,\n            in_list_view: 1,\n            label: __('Price Per Lt or Kg'),\n    },\n    {\n            fieldtype: 'Float',\n            fieldname: \"quantity_ltr_kg\",\n            default: 0,\n            read_only: 1,\n            in_list_view: 1,\n            label: __('Quantity Ltr Kg'),\n    }];\n\n    if (frm.doc.doctype == 'Sales Order' || frm.doc.doctype == 'Purchase Order') {\n        fields.splice(2, 0, {\n            fieldtype: 'Date',\n            fieldname: frm.doc.doctype == 'Sales Order' ? \"delivery_date\" : \"schedule_date\",\n            in_list_view: 1,\n            label: frm.doc.doctype == 'Sales Order' ? __(\"Delivery Date\") : __(\"Reqd by date\"),\n            reqd: 1\n        })\n        fields.splice(3, 0, {\n            fieldtype: 'Float',\n            fieldname: \"conversion_factor\",\n            in_list_view: 1,\n            label: __(\"Conversion Factor\"),\n            precision: get_precision('conversion_factor')\n        })\n    }\n\n    new frappe.ui.Dialog({\n        title: __(\"Update Items\"),\n        fields: [\n            {\n                fieldname: \"trans_items\",\n                fieldtype: \"Table\",\n                label: \"Items\",\n                cannot_add_rows: cannot_add_row,\n                in_place_edit: false,\n                reqd: 1,\n                data: this.data,\n                get_data: () => {\n                    return this.data;\n                },\n                fields: fields\n            },\n        ],\n        primary_action: function () {\n            const trans_items = this.get_values()[\"trans_items\"].filter((item) => !!item.item_code);\n            frappe.call({\n                method: 'coatserve.coatserve.update_child_qty_rate',\n                freeze: true,\n                args: {\n                    'parent_doctype': frm.doc.doctype,\n                    'trans_items': trans_items,\n                    'parent_doctype_name': frm.doc.name,\n                    'child_docname': child_docname\n                },\n                callback: function () {\n                    frm.reload_doc();\n                }\n            });\n            this.hide();\n            refresh_field(\"items\");\n        },\n        primary_action_label: __('Update')\n    }).show();\n}\n\nerpnext.utils.map_current_doc = function (opts) {\n    function _map() {\n        if ($.isArray(cur_frm.doc.items) && cur_frm.doc.items.length > 0) {\n            // remove first item row if empty\n            if (!cur_frm.doc.items[0].item_code) {\n                cur_frm.doc.items = cur_frm.doc.items.splice(1);\n            }\n\n            // find the doctype of the items table\n            var items_doctype = frappe.meta.get_docfield(cur_frm.doctype, 'items').options;\n\n            // find the link fieldname from items table for the given\n            // source_doctype\n            var link_fieldname = null;\n            frappe.get_meta(items_doctype).fields.forEach(function (d) {\n                if (d.options === opts.source_doctype) link_fieldname = d.fieldname;\n            });\n\n            // search in existing items if the source_name is already set and full qty fetched\n            var already_set = false;\n            var item_qty_map = {};\n\n            $.each(cur_frm.doc.items, function (i, d) {\n                opts.source_name.forEach(function (src) {\n                    if (d[link_fieldname] == src) {\n                        already_set = true;\n                        if (item_qty_map[d.item_code])\n                            item_qty_map[d.item_code] += flt(d.qty);\n                        else\n                            item_qty_map[d.item_code] = flt(d.qty);\n                    }\n                });\n            });\n\n            if (already_set) {\n                opts.source_name.forEach(function (src) {\n                    frappe.model.with_doc(opts.source_doctype, src, function (r) {\n                        var source_doc = frappe.model.get_doc(opts.source_doctype, src);\n                        $.each(source_doc.items || [], function (i, row) {\n                            if (row.qty > flt(item_qty_map[row.item_code])) {\n                                already_set = false;\n                                return false;\n                            }\n                        })\n                    })\n\n                    if (already_set) {\n                        frappe.msgprint(__(\"You have already selected items from {0} {1}\",\n                            [opts.source_doctype, src]));\n                        return;\n                    }\n\n                })\n            }\n        }\n\n        return frappe.call({\n            // Sometimes we hit the limit for URL length of a GET request\n            // as we send the full target_doc. Hence this is a POST request.\n            type: \"POST\",\n            method: 'frappe.model.mapper.map_docs',\n            args: {\n                \"method\": opts.method,\n                \"source_names\": opts.source_name,\n                \"target_doc\": cur_frm.doc,\n                \"args\": opts.args\n            },\n            callback: function (r) {\n                if (!r.exc) {\n                    var doc = frappe.model.sync(r.message);\n                    cur_frm.dirty();\n                    cur_frm.refresh();\n                }\n            }\n        });\n    }\n\n    let query_args = {};\n    if (opts.get_query_filters) {\n        query_args.filters = opts.get_query_filters;\n    }\n\n    if (opts.get_query_method) {\n        query_args.query = opts.get_query_method;\n    }\n\n    if (query_args.filters || query_args.query) {\n        opts.get_query = () => query_args;\n    }\n\n    if (opts.source_doctype) {\n        const d = new frappe.ui.form.MultiSelectDialog({\n            doctype: opts.source_doctype,\n            target: opts.target,\n            date_field: opts.date_field || undefined,\n            setters: opts.setters,\n            get_query: opts.get_query,\n            add_filters_group: 1,\n            allow_child_item_selection: opts.allow_child_item_selection,\n            child_fieldname: opts.child_fieldname,\n            child_columns: opts.child_columns,\n            size: opts.size,\n            action: function (selections, args) {\n                let values = selections;\n                if (values.length === 0) {\n                    frappe.msgprint(__(\"Please select {0}\", [opts.source_doctype]))\n                    return;\n                }\n                opts.source_name = values;\n                if (opts.allow_child_item_selection) {\n                    // args contains filtered child docnames\n                    opts.args = args;\n                }\n                d.dialog.hide();\n                _map();\n            },\n        });\n\n        return d;\n    }\n\n    if (opts.source_name) {\n        opts.source_name = [opts.source_name];\n        _map();\n    }\n}\n\nfrappe.form.link_formatters['Item'] = function (value, doc) {\n    if (doc && value && doc.item_name && doc.item_name !== value && doc.item_code === value) {\n        return value + ': ' + doc.item_name;\n    } else if (!value && doc.doctype && doc.item_name) {\n        // format blank value in child table\n        return doc.item_name;\n    } else {\n        // if value is blank in report view or item code and name are the same, return as is\n        return value;\n    }\n}\n\nfrappe.form.link_formatters['Employee'] = function (value, doc) {\n    if (doc && value && doc.employee_name && doc.employee_name !== value && doc.employee === value) {\n        return value + ': ' + doc.employee_name;\n    } else if (!value && doc.doctype && doc.employee_name) {\n        // format blank value in child table\n        return doc.employee;\n    } else {\n        // if value is blank in report view or project name and name are the same, return as is\n        return value;\n    }\n}\n\nfrappe.form.link_formatters['Project'] = function (value, doc) {\n    if (doc && value && doc.project_name && doc.project_name !== value && doc.project === value) {\n        return value + ': ' + doc.project_name;\n    } else if (!value && doc.doctype && doc.project_name) {\n        // format blank value in child table\n        return doc.project;\n    } else {\n        // if value is blank in report view or project name and name are the same, return as is\n        return value;\n    }\n};\n\n// add description on posting time\n$(document).on('app_ready', function () {\n    if (!frappe.datetime.is_timezone_same()) {\n        $.each([\"Stock Reconciliation\", \"Stock Entry\", \"Stock Ledger Entry\",\n            \"Delivery Note\", \"Purchase Receipt\", \"Sales Invoice\"], function (i, d) {\n                frappe.ui.form.on(d, \"onload\", function (frm) {\n                    cur_frm.set_df_property(\"posting_time\", \"description\",\n                        frappe.sys_defaults.time_zone);\n                });\n            });\n    }\n});\n\n// Show SLA dashboard\n$(document).on('app_ready', function () {\n    frappe.call({\n        method: 'erpnext.support.doctype.service_level_agreement.service_level_agreement.get_sla_doctypes',\n        callback: function (r) {\n            if (!r.message)\n                return;\n\n            $.each(r.message, function (_i, d) {\n                frappe.ui.form.on(d, {\n                    onload: function (frm) {\n                        if (!frm.doc.service_level_agreement)\n                            return;\n\n                        frappe.call({\n                            method: 'erpnext.support.doctype.service_level_agreement.service_level_agreement.get_service_level_agreement_filters',\n                            args: {\n                                doctype: frm.doc.doctype,\n                                name: frm.doc.service_level_agreement,\n                                customer: frm.doc.customer\n                            },\n                            callback: function (r) {\n                                if (r && r.message) {\n                                    frm.set_query('priority', function () {\n                                        return {\n                                            filters: {\n                                                'name': ['in', r.message.priority],\n                                            }\n                                        };\n                                    });\n                                    frm.set_query('service_level_agreement', function () {\n                                        return {\n                                            filters: {\n                                                'name': ['in', r.message.service_level_agreements],\n                                            }\n                                        };\n                                    });\n                                }\n                            }\n                        });\n                    },\n\n                    refresh: function (frm) {\n                        if (frm.doc.status !== 'Closed' && frm.doc.service_level_agreement\n                            && ['First Response Due', 'Resolution Due'].includes(frm.doc.agreement_status)) {\n                            frappe.call({\n                                'method': 'frappe.client.get',\n                                args: {\n                                    doctype: 'Service Level Agreement',\n                                    name: frm.doc.service_level_agreement\n                                },\n                                callback: function (data) {\n                                    let statuses = data.message.pause_sla_on;\n                                    const hold_statuses = [];\n                                    $.each(statuses, (_i, entry) => {\n                                        hold_statuses.push(entry.status);\n                                    });\n                                    if (hold_statuses.includes(frm.doc.status)) {\n                                        frm.dashboard.clear_headline();\n                                        let message = { 'indicator': 'orange', 'msg': __('SLA is on hold since {0}', [moment(frm.doc.on_hold_since).fromNow(true)]) };\n                                        frm.dashboard.set_headline_alert(\n                                            '<div class=\"row\">' +\n                                            '<div class=\"col-xs-12\">' +\n                                            '<span class=\"indicator whitespace-nowrap ' + message.indicator + '\"><span>' + message.msg + '</span></span> ' +\n                                            '</div>' +\n                                            '</div>'\n                                        );\n                                    } else {\n                                        set_time_to_resolve_and_response(frm, data.message.apply_sla_for_resolution);\n                                    }\n                                }\n                            });\n                        } else if (frm.doc.service_level_agreement) {\n                            frm.dashboard.clear_headline();\n\n                            let agreement_status = (frm.doc.agreement_status == 'Fulfilled') ?\n                                { 'indicator': 'green', 'msg': 'Service Level Agreement has been fulfilled' } :\n                                { 'indicator': 'red', 'msg': 'Service Level Agreement Failed' };\n\n                            frm.dashboard.set_headline_alert(\n                                '<div class=\"row\">' +\n                                '<div class=\"col-xs-12\">' +\n                                '<span class=\"indicator whitespace-nowrap ' + agreement_status.indicator + '\"><span class=\"hidden-xs\">' + agreement_status.msg + '</span></span> ' +\n                                '</div>' +\n                                '</div>'\n                            );\n                        }\n                    },\n                });\n            });\n        }\n    });\n});\n\nfunction set_time_to_resolve_and_response(frm, apply_sla_for_resolution) {\n    frm.dashboard.clear_headline();\n\n    let time_to_respond;\n    if (!frm.doc.first_responded_on) {\n        time_to_respond = get_time_left(frm.doc.response_by, frm.doc.agreement_status);\n    } else {\n        time_to_respond = get_status(frm.doc.response_by, frm.doc.first_responded_on);\n    }\n\n    let alert = `\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-xs-12 col-sm-6\">\n\t\t\t\t<span class=\"indicator whitespace-nowrap ${time_to_respond.indicator}\">\n\t\t\t\t\t<span>Time to Respond: ${time_to_respond.diff_display}</span>\n\t\t\t\t</span>\n\t\t\t</div>`;\n\n\n    if (apply_sla_for_resolution) {\n        let time_to_resolve;\n        if (!frm.doc.resolution_date) {\n            time_to_resolve = get_time_left(frm.doc.resolution_by, frm.doc.agreement_status);\n        } else {\n            time_to_resolve = get_status(frm.doc.resolution_by, frm.doc.resolution_date);\n        }\n\n        alert += `\n\t\t\t<div class=\"col-xs-12 col-sm-6\">\n\t\t\t\t<span class=\"indicator whitespace-nowrap ${time_to_resolve.indicator}\">\n\t\t\t\t\t<span>Time to Resolve: ${time_to_resolve.diff_display}</span>\n\t\t\t\t</span>\n\t\t\t</div>`;\n    }\n\n    alert += '</div>';\n\n    frm.dashboard.set_headline_alert(alert);\n}\n\nfunction get_time_left(timestamp, agreement_status) {\n    const diff = moment(timestamp).diff(moment());\n    const diff_display = diff >= 44500 ? moment.duration(diff).humanize() : 'Failed';\n    let indicator = (diff_display == 'Failed' && agreement_status != 'Fulfilled') ? 'red' : 'green';\n    return { 'diff_display': diff_display, 'indicator': indicator };\n}\n\nfunction get_status(expected, actual) {\n    const time_left = moment(expected).diff(moment(actual));\n    if (time_left >= 0) {\n        return { 'diff_display': 'Fulfilled', 'indicator': 'green' };\n    } else {\n        return { 'diff_display': 'Failed', 'indicator': 'red' };\n    }\n}\n\nfunction attach_selector_button(inner_text, append_loction, context, grid_row) {\n    let $btn_div = $(\"<div>\").css({ \"margin-bottom\": \"10px\", \"margin-top\": \"10px\" })\n        .appendTo(append_loction);\n    let $btn = $(`<button class=\"btn btn-sm btn-default\">${inner_text}</button>`)\n        .appendTo($btn_div);\n\n    $btn.on(\"click\", function () {\n        context.show_serial_batch_selector(grid_row.frm, grid_row.doc, \"\", \"\", true);\n    });\n}\n"],
  "mappings": "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",
  "names": []
}
